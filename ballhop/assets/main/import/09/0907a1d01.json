[1,["ecpdLyjvZBwrvm+cedCcQy","e8ZncEvOZGY6QM2uy7lu5T","f0BIwQ8D5Ml7nTNQbh1YlS","17e995404","12eb745ab","82migssElAGb04Ws6NimQX","e97GVMl6JHh5Ml5qEDdSGa","29FYIk+N1GYaeWH/q1NxQO","e9PT+pjCFDdYohFLqEBmx3","41FmZhwEZBV6EMVZHVTs8C","456NbQKY1ImakfM2XbfPpa","156608b7b","6f3XLyQ9RN/6tQnEujPqMJ","b1eTuVcyxAeLRmJK1z0ojs","6dkeWRTOBGXICfYQ7JUBnG","208+4VXMhFhrlc2UM/2AKK","131c4ee90","11b2gor45AbYeyIYSCBmVj","8aphQHtxlAz6gMPl2kxrjN","93C7vDMOdJopj72frloZHy","59SFj28apP77bsCnWjlwoN","56Lg4Wh+xFMaqHlaNYQJBQ","22kix+YctN/6LNiGRmS4I4","05XaSk+4hImoWHhdESUa6a","d3thLZ9+FOzYbcUBLRLMWq","a3VXPgqj5PZZZ62RKFXGsQ","c3XgWys4pCmpn5w8kdCV+W","6dd4JDVIdKKKpUqeceMV2v","a8dqzCFhRJLaGHs5KEUoBG","5bajd5pwBMzI1HxRlI28xl","85gdMlpT1BS4Wjaz7aAnoc","e2nSjkI8hKS5qMmkpNjoNW","75OCk1pEJIba1VEkpOTpEZ","69vMwl6QpH+aMfAaZBhnO9","edKIduEu5GFocYkxMQ1jz9","5aSkMTFi5N/Zw3/LNwFJ+e","e3titQGA5LMKAvoKAZXT/B","22Z4QbXsFOAq/dmUOogtn/","99TiOWZOpFWZ1pqlRi7/3C","a2MjXRFdtLlYQ5ouAFv/+R","dcUu0ESJdK5r/GVdCQB091","50c2oO8Y9DEZCgyWQ2NPiQ","e1CITBcgdMU5Xj9dCufZWR","180db7c75","dfbHkLf4VDV66drw9ocg8r","4fdpjHRpNPDZPTkGU8F+OH","ef5Dbm1exGzrATj00oNqQz","635zpYHYlFCYfAUP2lg2es","48LtSbRS1O7oeDZIKu7a94","71VhFCTINJM6/Ky3oX9nBT","1btVbWgz5HQJV3FN+TPQNh","8cNlRmfElLOZV0unpbtrHp","b08v422oNFcYlZFBaey60m","95ccZ6s2FGi6XonsL7nWPn","f9qjysyJRMToTDkQPx3JSp","44JXNpsHtBvoPk7+JfXRX+","d2QwKC5nlN9bR9QiazQKjv","cc4U+kETBC4aJn8pNAaxjE","4c57/mWmdDG4x6I+pFI7cV","d8HsitJHxOYqo801xBk8ev","02delMVqdBD70a/HSD99FK","431/jfgQpHhrIqfxOv279Z","da8YuBOa1NHaw5cQxTs8Yo","dd5/ZdYIxDAp9ApD66v1H1","2aKWBXJHxKHLvrBUi2yYZQ","9f/dqKhjFOmaZPXHQOOCpo","35L2bFA5tOO7/flEMlLTbR","88SOs2AzhPm4ow5cm3yceu","7a/o1d6D1Bo4g0K8ALZdC0","0bylc01eNNpZbh+E2TSRiA","35M4X3NbBHNY2WLYrQdzWL","bcfXfBYaZHS6sLrwKWC3yK","080Ed9xvVN3KhZkojeTWZ8","3bvbD2xfZF3p8zi1y6+01t","b3kLwu1YNL06vlhyukwsV6","0eqg32ikJKIqjKn6Sj9f99","2bVF7snfpPbbA2A9tq0LHl","8e/MXjx5pJvpssR4CXD7zP","3eimvJMd5Fj7Fgk0B1hUwp","3bJjbO4m9PuLz1POTQih76","84OwygW6lP4K3qyLnlhzDb","9bvaMerUlDyary99mJa6xp","21F2cHvlpFG5EZjlKz9qla","54uoqMRtVPiJcPYUN+G0Ac","c0XJ5rd4VNZqtwpmP+m0pt","4a4zC2QM9EsoptggVcWHth","5ehTidCSRHqLJXglPDn2aT","e3T7L7LnNHEoGTE7j01IMT","93/FXzWiZEAZeZGSof85wT","f7VPdXP5tHMr9Er9Sn8USq","77IxkF4IpEWoXOJdMyFr1J","682AzT0OJBwrRaAFJMtKcY","16wRuwB7hHxaEEN69mY254","dcktYa/CVKOpnAk/VRqJVd","39lFcZbzFDOabWp74aL2Lw","4cpl26ShNJeqJiWsLXBvv3","32G48sONlAmI3UK/Md7Ba1","2bJ5zuVR1D6KYzZyfpvvwQ","b4P/PCArtIdIH38t6mlw8Y","e8Ueib+qJEhL6mXAHdnwbi","abwstieFJFJakN1HRIe4jy"],["node","_spriteFrame","_textureSetter","_N$file","_effectAsset","_parent","root","mainTexture","_mesh","_N$normalSprite","_N$pressedSprite","_N$hoverSprite","_N$disabledSprite","data","_N$target","diffuseTexture","_normalMaterial","_clip","coinText","btnUnlockAds","btnUnlock","btnPlay","title","btnShare","mesh","songLists","songs","scorePanel","levelNumber","unlockLevel","btnHome","btnReplay","lbGold","bestScore","newRecord","score","starsActive","stars","songName","timeLabel","earGoldEffect","videoLoading","videoNotAvailable","dieAudio","node_tryPlayTip","node_tutorial","node_endless2","node_endless1","node_66","node_33","node_progressbar","node_continuePlay","node_wingame","gate_fx","node_gate","node_tip","node_revive","node_warningConnect","lb_coin","lb_combo","lb_mid","lb_namesong","lb_timegame","bt_nextlevel","bt_nextsong","bt_start","bt_reset_mid","bt_reset","player_fx","player_trail","lb_count","player","camera_background","camera","obs_root","roads_root","tutorial_go","tutorial_tut3","tutorial_tut2","tutorial_tut1","end_new_songs_title","end_ull_desc","end_ull_title","end_invite_friends","end_new_record","ctn_nothanks","ctn_share_lb","ctn_gold_lb","ctn_second_chance","tptip_desc","tptip_title","tip","loading_slowConnectDesc","loading_slowConnect","loading_wait","loading_tut3","loading_tut2","loading_tut1","sky_up","sky_right","sky_left","sky_down","sky_back","sky_front","skybox","btnGold","nothanks","circle","scene","prefab_segment","prefab_obstacle","prefab_colorgate","prefab_gold","prefab_ballmove","nextSongItem","road_material","default_road","emissiveTexture","normalTexture"],[["cc.Node",["_name","_is3DNode","_active","_opacity","_groupIndex","_objFlags","_id","_parent","_components","_contentSize","_trs","_children","_prefab","_color","_eulerAngles","_anchorPoint"],-4,1,9,5,7,2,4,5,5,5],"cc.SpriteFrame",["cc.Widget",["_alignFlags","_left","_right","_top","_bottom","_originalWidth","_originalHeight","_verticalCenter","alignMode","node"],-6,1],["cc.Label",["_fontSize","_string","_N$verticalAlign","_isSystemFontUsed","_N$horizontalAlign","_N$overflow","_lineHeight","_N$cacheMode","_spacingX","_enableWrapText","node","_materials","_N$file"],-7,1,3,6],["cc.Sprite",["_sizeMode","_type","_dstBlendFactor","_isTrimmedMode","_name","_enabled","_fillType","_srcBlendFactor","_fillRange","_fillStart","node","_materials","_spriteFrame","_fillCenter"],-7,1,3,6,5],["cc.Node",["_name","_is3DNode","_groupIndex","_active","_id","_parent","_components","_contentSize","_trs","_color","_eulerAngles","_children","_prefab"],-2,1,2,5,7,5,5,2,4],["cc.ParticleSystem3D",["_capacity","loop","duration","playOnAwake","simulationSpeed","_renderMode","_simulationSpace","_prewarm","scaleSpace","node","_materials","startDelay","startLifetime","startColor","startSize","startSpeed","startRotation","gravityModifier","rateOverTime","rateOverDistance","bursts","_colorOverLifetimeModule","_sizeOvertimeModule","_shapeModule","_rotationOvertimeModule","_mesh","_textureAnimationModule","_limitVelocityOvertimeModule"],-6,1,3,4,4,4,4,4,4,4,4,4,9,4,4,4,4,6,4,4],["cc.Keyframe",["inTangent","value","time","outTangent"],-1],["cc.Node",["_name","_objFlags","_is3DNode","_id","_active","_parent","_components","_contentSize","_trs","_color","_anchorPoint","_prefab","_children"],-2,1,12,5,7,5,5,4,12],["cc.CurveRange",["mode","multiplier","constant","constantMin","constantMax","curve"],-2,4],["cc.Button",["_N$transition","_N$enableAutoGrayEffect","node","clickEvents","_N$normalColor","_N$pressedColor","_N$disabledColor","_N$target","_N$normalSprite","_N$pressedSprite","_N$hoverSprite","_N$disabledSprite","_normalMaterial"],1,1,9,5,5,5,1,6,6,6,6,6],["cc.MeshRenderer",["_enableAutoBatch","node","_materials","_mesh"],2,1,3,6],["cc.Burst",["minCount","maxCount","repeatInterval","_repeatCount","count"],-1,4],["cc.ColorKey",["time","color"],2,5],["cc.AlphaKey",["alpha","time"],1],["cc.Camera",["_cullingMask","_clearFlags","_fov","_farClip","_ortho","_alignWithScreen","_depth","_renderStages","_nearClip","node"],-6,1],["cc.ShapeModule",["enable","radius","_angle","length","_shapeType","arcMode","arcSpread","arcSpeed","_rotation","_scale"],-4,4,5,5],["cc.Material",["_name","_techniqueData"],2,11],["cc.PrefabInfo",["fileId","root"],2,1],["cc.BufferRange",["length","offset"],1],["cc.AudioSource",["preload","node","_clip"],2,1,6],["cc.GradientRange",["_mode","gradient"],2,4],["cc.Gradient",["alphaKeys","colorKeys"],3,9,9],["cc.SizeOvertimeModule",["enable","separateAxes","size","x","y","z"],1,4,4,4,4],["cc.Prefab",["_name"],2],["8afafCqmcBHaac+Bh5LhoL3",["node"],3,1],["cc.AudioClip",["_name","_native","duration"],0],["cc.Mesh",["_native","_vertexBundles","_primitives","_minPos","_maxPos"],2,9,9,5,5],["cc.mesh.VertexBundle",["verticesCount","data","formats"],2,4,9],["cc.mesh.VertexFormat",["name","type","num"],0],["cc.mesh.Primitive",["vertexBundleIndices","data"],2,4],["94612zAnk9NaIgBSlfnXjx0",["node","mesh"],3,1,1],["1802do5XcZCN6HXEbNjpat0",["node","title","btnPlay","btnUnlock","btnUnlockAds","coinText"],3,1,1,1,1,1,1],["cc.ClickEvent",["_componentId","handler","target"],1,1],["4622aIw+QlM9ZX5Eog+BkEh",["move","node"],2,1],["cc.EffectAsset",["_name","shaders","techniques"],0],["cc.SceneAsset",["_name","asyncLoadAssets"],1],["55e10JnsbNBH6eAX9QKGjOR",["node","songName","stars","starsActive","score","newRecord","bestScore","lbGold","btnReplay","btnHome","btnShare","unlockLevel","levelNumber","scorePanel","songs","songLists","nextSongItem"],3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,6],["a60380Jj8RESo9yyI53WoPl",["node","timeLabel"],3,1,1],["5fe8dcD2T1GlorW7CX1QlDa",["node","roads_root","obs_root","camera","camera_background","player","lb_count","player_trail","player_fx","bt_reset","bt_reset_mid","bt_start","bt_nextsong","bt_nextlevel","lb_timegame","lb_namesong","lb_mid","lb_combo","lb_coin","node_loading","node_warningConnect","node_revive","node_tip","node_gate","gate_fx","node_wingame","node_endGame","node_continuePlay","node_progressbar","node_33","node_66","node_endless1","node_endless2","node_tutorial","node_tryPlayTip","dieAudio","videoNotAvailable","videoLoading","earGoldEffect","prefab_segment","prefab_obstacle","prefab_colorgate","prefab_gold","prefab_ballmove"],3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,6,6,6,6,6],["aa72bu/mCZO0q1ufaDzPKBa",["node","loading_tut1","loading_tut2","loading_tut3","loading_wait","loading_slowConnect","loading_slowConnectDesc","tip","tptip_title","tptip_desc","ctn_second_chance","ctn_gold_lb","ctn_share_lb","ctn_nothanks","end_new_record","end_invite_friends","end_ull_title","end_ull_desc","end_new_songs_title","tutorial_tut1","tutorial_tut2","tutorial_tut3","tutorial_go"],3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],["868bboWsX9InLkpfmrkB25j",["node","skybox","sky_front","sky_back","sky_down","sky_left","sky_right","sky_up","road_material","default_road"],3,1,1,1,1,1,1,1,1,6,6],["7ed3ekwh35APKZxYa5fG4AB",["node","circle","nothanks","endGame","btnGold","btnShare"],3,1,1,1,1,1,1],["8edaaJDmpVL24FDtGMHphx8",["node","color_bg","color_fg","color_star"],3,1,5,5,5],["cc.ColorOvertimeModule",["enable","color"],2,4],["cc.AnimationCurve",["keyFrames"],3,2],["cc.AnimationCurve",["keyFrames"],3,9],["cc.Scene",["_name","_active","_children","_anchorPoint","_trs"],1,2,5,7],["cc.Layout",["node","_layoutSize"],3,1,5],["cc.Canvas",["node","_designResolution"],3,1,5],["c5496es6UFA0YPrYiqir0iT",["node"],3,1],["2091cRra3pOnJigcrmhwRqV",["speed","node"],2,1],["cc.RotationOvertimeModule",["enable","x","y","z"],2,4,4,4],["cc.TextureAnimationModule",["_enable","numTilesX","numTilesY","cycleCount","frameOverTime","startFrame"],-1,4,4],["cc.LimitVelocityOvertimeModule",["enable","dampen","limit","limitX","limitY","limitZ"],1,4,4,4,4],["4f09akFNqFE8YpS+foweLeR",["_enabled","seeds","node","toPos"],1,1,1]],[[9,1],[18,0,1,2],[4,0,10,11,12,2],[13,0,1,2],[9,2,2],[9,0,3,4,4],[33,0,1,2,3],[14,0,1,3],[0,0,7,8,9,10,2],[0,0,7,11,8,9,10,2],[10,2,3,1],[21,0,1,2],[0,0,7,8,12,9,10,2],[13,1,1],[17,0,1,2],[0,0,7,8,12,9,2],[4,1,0,10,11,12,3],[9,0,1,5,3],[0,0,7,8,9,2],[0,0,7,8,13,9,2],[4,0,10,11,2],[29,0,1,2,4],[2,8,0,5,6,9,5],[3,1,0,3,4,2,10,11,6],[14,0,2],[0,0,2,7,11,8,9,10,3],[2,0,5,6,9,4],[2,0,1,2,3,5,9,6],[3,1,0,9,4,2,5,10,11,7],[44,0,1,2],[22,1,0,1],[0,0,7,11,8,12,9,10,2],[0,0,3,7,8,9,10,3],[2,0,9,2],[3,1,0,6,3,4,2,5,10,11,8],[21,1],[24,0,2],[8,0,5,6,7,8,2],[2,0,2,4,9,4],[2,0,1,9,3],[2,0,1,2,5,9,5],[2,0,3,9,3],[10,0,2,3,4,5,6,7,8,9,10,11,2],[3,1,0,3,4,2,10,11,12,6],[22,0,1],[45,0,1],[52,0,1,2,3,2],[0,0,7,11,8,13,9,2],[0,0,1,7,8,10,3],[0,0,1,7,8,9,10,14,3],[5,0,1,2,5,6,9,7,8,10,4],[4,4,0,10,11,12,3],[9,1,2],[12,0,1,4,3],[12,0,1,2,4,4],[46,0,1],[0,0,2,7,11,8,9,3],[0,0,1,7,8,3],[8,0,5,6,11,7,8,2],[18,1,1],[4,2,0,10,11,12,3],[2,0,1,2,3,9,5],[3,1,0,3,10,11,12,4],[6,0,1,3,6,4,5,9,10,11,12,13,14,15,16,17,18,19,20,23,24,25,7],[16,0,1,2,7,8,4],[7,0,3,3],[7,2,1,0,3,5],[0,0,1,11,12,10,3],[0,0,1,7,11,12,10,3],[0,0,2,1,7,8,12,9,10,4],[0,0,2,7,11,8,12,9,10,3],[0,0,1,7,3],[0,0,7,11,8,10,2],[0,0,11,8,13,9,2],[0,0,7,8,13,9,10,2],[0,0,1,7,11,9,3],[0,0,3,7,8,13,9,3],[0,0,1,7,8,12,3],[8,0,4,5,6,7,10,8,3],[8,0,5,6,9,7,8,2],[5,0,5,6,7,2],[4,10,11,12,1],[25,0,1],[27,0,1,2,3,4,2],[28,0,1,2,2],[19,0,2],[19,1,0,3],[30,0,1,2],[2,0,5,9,3],[2,0,4,9,3],[2,0,1,3,9,4],[3,1,0,6,3,2,5,10,11,12,7],[3,1,0,3,4,2,5,10,11,7],[23,0,2,3,4,5,2],[7,2,1,3],[0,0,3,1,7,8,12,13,9,10,4],[0,0,1,7,8,12,13,9,10,14,3],[0,0,1,11,8,12,10,3],[0,0,7,8,12,9,15,10,2],[0,0,2,3,7,11,8,13,9,4],[0,0,7,11,8,9,2],[0,0,2,1,7,11,9,4],[0,0,1,7,8,10,14,3],[0,0,7,8,9,15,2],[0,0,3,7,8,9,10,14,3],[5,0,5,6,9,7,8,2],[5,0,5,6,7,8,2],[4,0,3,10,11,12,3],[4,7,2,0,10,11,12,4],[4,4,1,0,10,11,12,4],[26,0,1,2,4],[11,1,2,1],[32,0,1,2,3,4,5,1],[10,0,2,3,4,5,6,7,12,8,9,10,11,2],[3,1,0,4,2,5,10,11,6],[3,1,0,6,3,4,2,7,10,11,12,8],[3,1,0,3,2,5,10,11,12,6],[3,1,0,3,4,2,5,10,11,12,7],[3,1,0,3,2,7,10,11,6],[3,1,0,6,3,4,5,10,11,7],[20,0,1,2,2],[6,2,0,1,3,4,5,9,10,11,12,13,14,15,16,17,18,19,20,21,22,7],[6,7,6,4,5,9,10,11,12,13,14,15,16,17,18,19,23,21,24,25,5],[13,0,2],[23,0,1,2,3,4,5,3],[48,0,1,1],[16,0,1,3,7,8,9,4],[17,1,1],[0,0,3,1,7,8,12,13,9,4],[0,0,1,7,8,12,13,9,3],[0,0,1,7,8,12,9,10,14,3],[0,0,1,7,8,12,10,14,3],[0,0,1,7,11,12,3],[0,0,2,1,7,8,12,13,9,10,14,4],[0,0,11,8,12,9,10,2],[0,0,1,8,12,15,10,3],[0,0,2,11,8,12,9,10,3],[0,0,4,11,8,13,9,3],[0,0,5,6,8,4],[0,0,7,11,8,9,15,10,2],[0,0,1,11,10,14,3],[0,0,1,7,11,8,13,9,10,3],[0,0,1,11,10,3],[0,0,2,7,11,8,13,9,3],[0,0,2,1,7,11,8,9,10,4],[0,0,5,4,6,7,11,8,9,10,5],[0,0,2,7,8,13,9,3],[0,0,1,7,11,3],[0,0,7,11,12,10,2],[0,0,7,11,10,2],[0,0,1,4,6,7,11,9,5],[0,0,1,4,8,10,14,4],[0,0,3,7,8,12,13,9,3],[0,0,1,7,11,8,10,3],[0,0,5,1,7,11,10,4],[0,0,7,8,10,2],[0,0,3,1,7,8,13,9,10,4],[0,0,1,7,8,13,9,3],[0,0,7,8,12,9,10,14,2],[0,0,3,7,8,9,3],[0,0,2,7,8,9,10,3],[0,0,2,7,8,9,3],[8,0,1,2,3,12,5],[8,0,5,6,11,9,7,8,2],[8,0,5,6,9,7,10,8,2],[5,0,3,5,11,6,8,3],[5,0,1,2,5,6,9,7,8,4],[5,0,5,6,12,9,7,8,2],[5,0,5,6,9,7,2],[5,0,5,6,7,8,10,2],[5,0,4,5,6,3],[4,5,0,3,10,11,12,4],[4,5,0,10,11,12,3],[4,1,0,10,11,3],[4,0,6,8,10,11,12,4],[4,10,11,1],[4,1,0,6,9,10,11,13,5],[31,0,1,1],[11,0,1,2,3,2],[11,1,2,3,1],[2,0,1,2,9,4],[2,1,2,3,4,5,6,9,7],[2,0,1,2,3,4,5,6,9,8],[2,0,1,3,4,9,5],[2,0,1,4,9,4],[2,0,2,3,4,7,6,9,7],[2,0,3,4,7,6,9,6],[2,0,7,9,3],[2,0,1,2,3,4,6,9,7],[2,0,1,2,3,4,9,6],[2,0,2,3,9,4],[2,0,1,2,3,4,5,9,7],[2,0,1,2,4,5,9,6],[2,0,1,2,7,5,9,6],[10,1,2,3,12,2],[3,1,0,6,3,4,2,5,10,11,12,8],[3,0,6,3,4,2,7,10,11,7],[3,1,0,4,2,7,10,11,6],[3,1,0,3,8,4,2,7,10,11,8],[3,1,0,6,3,4,2,5,7,10,11,9],[3,1,0,6,3,2,5,10,11,7],[3,1,0,3,2,5,10,11,6],[3,1,0,3,8,4,2,10,11,12,7],[34,0,1,2],[35,0,1,2,4],[36,0,1,3],[37,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,1],[20,0,2],[38,0,1,1],[39,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,1],[40,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,1],[41,0,1,2,3,4,5,6,7,8,9,1],[42,0,1,2,3,4,5,1],[43,0,1,2,3,1],[6,2,0,1,3,4,9,10,11,12,13,14,15,16,17,18,19,20,21,22,6],[6,2,0,1,3,9,10,11,12,13,14,15,16,17,18,19,20,26,5],[6,2,0,1,3,9,10,11,12,13,14,15,16,17,18,19,20,21,5],[6,2,0,1,4,9,10,11,12,13,14,15,16,17,18,19,20,21,22,5],[6,2,0,1,3,4,8,9,10,11,12,13,14,15,16,17,18,19,20,23,21,22,27,7],[9,0,5,2],[12,0,1,3,2,4,5],[14,1,2],[47,0,1,2,3,4,3],[49,0,1,1],[50,0,1],[51,0,1,2],[15,0,1,2,3,4,5,9,7],[15,0,1,6,2,8,3,4,7,5,9,10],[15,0,1,6,7,9,5],[16,0,4,1,5,6,7,6],[7,1],[7,1,3,3],[7,2,0,3],[7,1,0,3],[7,2,1,0,4],[53,0,1,2,3,4,5,5],[54,0,1,2,3,4,5,3],[55,0,1,2,3,3]],[[[{"name":"bg_ui","rect":[0,0,720,1280],"offset":[0,0],"originalSize":[720,1280],"capInsets":[0,0,0,0]}],[1],0,[0],[2],[44]],[[[14,"BallMaterial1_1",[{},"0",11,[{"defines":{"USE_DIFFUSE_TEXTURE":true}},"props",11,[{},"diffuseTexture",6,0]]]]],0,0,[0,0],[15,4],[45,14]],[[[36,"BallMove"],[67,"BallMove",true,[-2],[1,"3evxLEjGJBLpQz7m2NX47m",-1],[0,0,-15,0,0,0,1,1,1,1]],[68,"mesh",true,1,[-3,-4,-5,-6],[1,"098dWGklhHrozlc19NsIJ4",1],[0,0,0,0,0,0,1,3,3,3]],[69,"arrow_tutorial",false,true,2,[[2,0,-7,[0],1],[82,-8]],[1,"547JGJQyJH9JwVLziTSD1E",1],[5,0.8,0.8],[0,1.083,0,0,0,0,1,1,1,1]],[95,"shadow",136,true,2,[[2,0,-9,[2],3]],[1,"227pX0PidP2bGXoyJerDzl",1],[4,4278220920],[5,1.5,1],[0,-0.901,0,0,0,0,1,1,1,1]],[128,"ball",232,true,2,[[2,0,-10,[4],5]],[1,"b2pVnzyIRGpLnAAOX4OKWC",1],[4,4278241480],[5,1,1]],[96,"light",true,2,[[60,1,0,-11,[6],7]],[1,"17/Af2uThIo77kAc6JGnnt",1],[4,4291940817],[5,0.7,1.2],[-0.21,0.146,-0.081,0,0,-0.08715574274765817,0.9961946980917455,1,1,1],[1,0,0,-10]]],0,[0,6,1,0,-1,2,0,-1,3,0,-2,4,0,-3,5,0,-4,6,0,0,3,0,0,3,0,0,4,0,0,5,0,0,6,0,13,1,11],[0,0,0,0,0,0,0,0],[-1,1,-1,1,-1,1,-1,1],[0,15,0,26,0,46,0,10]],[[[14,"Earn_fbf",[{},"0",11,[{"defines":{}},"props",11,[{},"tintColor",8,[4,2147483647],"mainTexture",6,0]]]]],0,0,[0,0],[7,4],[47,5]],[[{"name":"line_shop","rect":[3,3,751,8],"offset":[0,0],"originalSize":[789,10],"rotated":1,"capInsets":[0,0,0,0]}],[1],0,[0],[2],[4]],[[{"name":"btn_setting_close","rect":[261,436,131,149],"offset":[0,0],"originalSize":[131,149],"capInsets":[0,0,0,0]}],[1],0,[0],[2],[16]],[[{"name":"arrow_tutorial","rect":[147,1501,138,148],"offset":[0.5,0.5],"originalSize":[139,149],"rotated":1,"capInsets":[0,0,0,0]}],[1],0,[0],[2],[3]],[[{"name":"white_h","rect":[306,1232,63,64],"offset":[0.5,0],"originalSize":[64,64],"rotated":1,"capInsets":[0,0,0,0]}],[1],0,[0],[2],[3]],[[[14,"nova_blue",[{},"0",11,[{"defines":{}},"props",11,[{},"mainTexture",6,0]]]]],0,0,[0,0],[7,4],[48,5]],[[{"name":"btn_endgame_0","rect":[3,1232,263,297],"offset":[0,0],"originalSize":[263,297],"rotated":1,"capInsets":[0,0,0,0]}],[1],0,[0],[2],[3]],[[{"name":"default_btn_disabled","rect":[0,0,40,40],"offset":[0,0],"originalSize":[40,40],"capInsets":[12,12,12,12]}],[1],0,[0],[2],[49]],[[[14,"LensFlare",[{},"0",11,[{"defines":{}},"props",11,[{},"tintColor",8,[4,4294967295],"mainTexture",6,0]]]]],0,0,[0,0],[7,4],[50,5]],[[[110,"die-explosion",".mp3",1.901313],-1],0,0,[],[],[]],[[[36,"Obstacle"],[67,"Obstacle",true,[-2],[59,-1],[0,0,10,0,0,0,1,1,1,1]],[68,"mesh",true,1,[-3,-4,-5,-6],[1,"4cwIkO9HVNnql5tit82/9y",1],[0,0,0,0,0,0,1,3,3,3]],[69,"arrow_tutorial",false,true,2,[[2,0,-7,[0],1],[82,-8]],[1,"bbJQkT9N9F0btwS1KkBj1V",1],[5,0.8,0.8],[0,1.083,0,0,0,0,1,1,1,1]],[95,"shadow",134,true,2,[[107,0,false,-9,[2],3]],[1,"fa2c0t2AJEg5QoNRTvrSE5",1],[4,4278220920],[5,1.3,0.9],[-0.02,-0.7,0,0,0,0,1,1,1,0.8]],[129,"ball",true,2,[[2,0,-10,[4],5]],[1,"a4uMLb6tdC7bggVVKm0p4Q",1],[4,4278255615],[5,1,1]],[130,"light",true,2,[[60,1,0,-11,[6],7]],[1,"2bK/Ef5plED66fDFMmuq/P",1],[5,0.7,1.2],[-0.21,0.146,-0.081,0,0,-0.08715574274765817,0.9961946980917455,1,1,1],[1,0,0,-10]]],0,[0,6,1,0,-1,2,0,-1,3,0,-2,4,0,-3,5,0,-4,6,0,0,3,0,0,3,0,0,4,0,0,5,0,0,6,0,13,1,11],[0,0,0,0,0,0,0,0],[-1,1,-1,1,-1,1,-1,1],[0,15,0,26,0,27,0,10]],[[[14,"mesh-texture-trail",[{},"0",11,[{"defines":{"USE_DIFFUSE_TEXTURE":true,"INPUT_IS_GAMMA":false,"OUTPUT_TO_GAMMA":false,"USE_ALPHA_TEST":false}},"props",11,[{"alphaThreshold":0.1},"diffuseTexture",6,0]]]]],0,0,[0,0],[15,4],[51,14]],[[{"name":"loading_hand","rect":[3,1501,138,234],"offset":[-0.5,0.5],"originalSize":[139,235],"capInsets":[0,0,0,0]}],[1],0,[0],[2],[3]],[[[83,".bin",[[84,1089,[85,34848],[[21,"a_normal",5126,3],[21,"a_position",5126,3],[21,"a_uv0",5126,2]]]],[[87,[0],[86,34848,12288]]],[1,-0.5,-0.5,-0.5],[1,0.5,0.5,0.5]],-1],0,0,[],[],[]],[[[14,"Glow02",[{},"0",11,[{"defines":{}},"props",11,[{},"mainTexture",6,0]]]]],0,0,[0,0],[7,4],[52,5]],[[{"name":"white","rect":[0,0,2,2],"offset":[0,0],"originalSize":[2,2],"capInsets":[0,0,0,0]}],[1],0,[0],[2],[53]],[[[83,".bin",[[84,166,[85,5312],[[21,"a_normal",5126,3],[21,"a_position",5126,3],[21,"a_uv0",5126,2]]]],[[87,[0],[86,5312,960]]],[1,-0.358758538961411,-0.108915917575359,-0.358758568763733],[1,0.358758538961411,0.108915857970715,0.358758538961411]],-1],0,0,[],[],[]],[[{"name":"p","rect":[3,3,420,420],"offset":[0,0],"originalSize":[420,420],"capInsets":[0,0,0,0]}],[1],0,[0],[2],[3]],[[{"name":"btn_bg_price","rect":[17,559,209,87],"offset":[0,0.5],"originalSize":[209,88],"capInsets":[0,0,0,0]}],[1],0,[0],[2],[4]],[[{"name":"icon_share","rect":[3,829,106,111],"offset":[0,0],"originalSize":[106,111],"rotated":1,"capInsets":[0,0,0,0]}],[1],0,[0],[2],[4]],[[{"name":"finger","rect":[306,1359,148,243],"offset":[0,0],"originalSize":[148,243],"capInsets":[0,0,0,0]}],[1],0,[0],[2],[3]],[[{"name":"star_home_bright","rect":[17,3,550,433],"offset":[0,0],"originalSize":[550,433],"rotated":1,"capInsets":[0,0,0,0]}],[1],0,[0],[2],[4]],[[{"name":"star_home_gray","rect":[232,559,181,181],"offset":[-0.5,-5],"originalSize":[550,433],"capInsets":[0,0,0,0]}],[1],0,[0],[2],[4]],[[{"name":"icon_gold","rect":[663,431,87,87],"offset":[0,0],"originalSize":[87,87],"capInsets":[0,0,0,0]}],[1],0,[0],[2],[16]],[[{"name":"btn_play_1","rect":[120,829,39,43],"offset":[0.5,0],"originalSize":[40,43],"capInsets":[0,0,0,0]}],[1],0,[0],[2],[4]],[[{"name":"icon_back","rect":[297,746,117,106],"offset":[0,0],"originalSize":[117,106],"rotated":1,"capInsets":[0,0,0,0]}],[1],0,[0],[2],[4]],[[{"name":"icon_try_ads","rect":[108,817,40,38],"offset":[0,0],"originalSize":[40,38],"rotated":1,"capInsets":[0,0,0,0]}],[1],0,[0],[2],[11]],[[{"name":"ball_w","rect":[427,694,75,75],"offset":[0,0],"originalSize":[75,75],"capInsets":[0,0,0,0]}],[1],0,[0],[2],[3]],[[[14,"Hexa",[{},"0",11,[{"defines":{}},"props",11,[{},"tintColor",8,[4,4291611852],"mainTexture",6,0]]]]],0,0,[0,0],[7,4],[28,5]],[[{"name":"btn_bg_free","rect":[190,537,205,82],"offset":[0,0],"originalSize":[205,82],"capInsets":[0,0,0,0]}],[1],0,[0],[2],[11]],[[{"name":"icon_try_ads","rect":[165,829,40,38],"offset":[0,0],"originalSize":[40,38],"rotated":1,"capInsets":[0,0,0,0]}],[1],0,[0],[2],[4]],[[[36,"Coin"],[97,"Coin",true,[-4],[[177,-3,-2]],[1,"d4zWodfF1IjYLOZMLRaCUX",-1],[0,0,10,0,0,0,1,1,1,1]],[68,"CoinModel",true,1,[-5,-6],[1,"d4PKO2KCpMSrzradliam2b",1],[0,2,0,0,0,0,1,3,3,3]],[69,"arrow_tutorial",false,true,2,[[2,0,-7,[0],1],[82,-8]],[1,"e75Ip6JgVGrYQ4e52n3Ur8",1],[5,0.8,0.85],[0,1.114,0,0,0,0,1,1,1,1]],[131,"Mesh",true,2,[[178,true,-9,[2],3]],[1,"1bZPx/MdRELqTax1ZFOUuz",1],[0,0,0,0.7071067811865475,0,0,0.7071067811865476,1.4,1.2,1.4],[1,90,0,0]]],0,[0,6,1,0,24,4,0,0,1,0,-1,2,0,-1,3,0,-2,4,0,0,3,0,0,3,0,0,4,0,13,1,9],[0,0,0,0],[-1,1,-1,8],[0,15,54,55]],[[{"name":"bg_load_data","rect":[0,0,720,1280],"offset":[0,0],"originalSize":[720,1280],"capInsets":[0,0,0,0]}],[1],0,[0],[2],[56]],[[{"name":"btn_play_0","rect":[123,652,67,67],"offset":[0,0],"originalSize":[67,67],"capInsets":[0,0,0,0]}],[1],0,[0],[2],[4]],[[[36,"ColorGate"],[67,"ColorGate",true,[-2],[1,"08aDjK9bhAKog7AWKX99PG",-1],[0,0,200,0,0,0,1,1,1,1]],[132,"mesh",true,1,[-3,-4],[1,"b48TV/XVRBJpvKaj04DqGU",1]],[133,"shadow",false,true,2,[[51,"ball<Sprite>",0,-5,[0],1]],[1,"a9HgM1swdKt7ZUJm4Nb/tV",1],[4,4278190080],[5,1,1],[0,1.3,-2,0.573576436351046,0,0,0.8191520442889918,18,10,1],[1,70,0,0]],[96,"block",true,2,[[51,"ball<Sprite>",0,-6,[2],3]],[1,"aevqEzjvtLFLLFQexPXsjT",1],[4,4278241480],[5,1,1],[0,1.5,-2,0.573576436351046,0,0,0.8191520442889918,18,8,1],[1,70,0,0]]],0,[0,6,1,0,-1,2,0,-1,3,0,-2,4,0,0,3,0,0,4,0,13,1,6],[0,0,0,0],[-1,1,-1,1],[0,9,0,57]],[[{"name":"star_slider","rect":[301,1608,91,90],"offset":[0,0],"originalSize":[91,90],"rotated":1,"capInsets":[0,0,0,0]}],[1],0,[0],[2],[3]],[[[14,"lensFlare2",[{},"0",11,[{"defines":{}},"props",11,[{},"tintColor",8,[4,2147352061],"mainTexture",6,0]]]]],0,0,[0,0],[7,4],[58,5]],[[{"name":"icon_gold","rect":[147,1645,87,87],"offset":[0,0],"originalSize":[87,87],"capInsets":[0,0,0,0]}],[1],0,[0],[2],[3]],[[[36,"nextSongItem"],[134,"nextSongItem",[-10,-11,-12,-13,-14,-15],[[20,0,-2,[22]],[88,40,610,-3],[112,-9,-8,-7,-6,-5,-4]],[59,-1],[5,880,190],[0,-100,0,0,0,0,1,1,1,1]],[31,"BtnUnlockAds",1,[-18,-19,-20],[[38,36,-6.007999999999981,22.166,-16],[10,-17,[[6,"1802do5XcZCN6HXEbNjpat0","playSong",1]]]],[1,"a1vQ/23T9J66dnmO8tK7tp",1],[5,280,110],[306.008,-17.834000000000003,0,0,0,0,1,1,1,1]],[70,"BtnUnlock",false,1,[-23,-24,-25],[[38,36,-4.004000000000019,21.058999999999997,-21],[10,-22,[[6,"1802do5XcZCN6HXEbNjpat0","playSong",1]]]],[1,"fbJXyqEwxJTpKDy9Nx/omH",1],[5,280,110],[304.004,-18.941000000000003,0,0,0,0,1,1,1,1]],[31,"BtnPlay",1,[-28,-29],[[38,36,-6.007999999999981,21.650000000000006,-26],[10,-27,[[6,"1802do5XcZCN6HXEbNjpat0","playSong",1]]]],[1,"38oESb645KbKSzb+Pi/qeJ",1],[5,280,110],[306.008,-18.349999999999994,0,0,0,0,1,1,1,1]],[31,"playIcon",1,[-32],[[2,0,-30,[2],3],[39,8,-24,-31]],[1,"dal2QZyWFB04DfrC64uAIq",1],[5,115,115],[-406.5,-7.03,0,0,0,0,1,1,1,1]],[98,"title",1,[[91,"Nắng Ấm Xa Dần Nắng Ấm Xa Dần",80,55,false,1,2,-33,[4],5],[40,40,143.22000000000003,296.78,377.78,-34]],[1,"4e/JvP+95IPo7imOU1CyyJ",1],[5,440,140],[0,0,0.5],[-296.78,-10.478,0,0,0,0,1,1,1,1]],[12,"text",3,[[23,"200",55,false,1,1,-35,[19]]],[1,"5c+x8bAJpN65PwHEPP++RO",1],[5,91.77,50.4],[27.239,0,0,0,0,0,1,1,1,1]],[15,"btn_play_1",5,[[2,0,-36,[0],1]],[1,"25l6DAoB5L0aOCOeL+8FE+",1],[5,60,60]],[15,"bg",4,[[2,0,-37,[6],7]],[1,"a7AcTgfD9Ee7BwC8APt1oB",1],[5,280,110]],[15,"text",4,[[43,"Play",70,false,1,1,-38,[8],9]],[1,"63cqgg2xhH0LIe9GOcMrEn",1],[5,91.39,40]],[15,"bg",2,[[2,0,-39,[10],11]],[1,"ebL52gOIRE1bQ9YFQhwtKd",1],[5,280,110]],[12,"icon",2,[[2,0,-40,[12],13]],[1,"f1sn4uZZBKvaUtKsSVQWz4",1],[5,45,40],[-50.945,-3.483,0,0,0,0,1,1,1,1]],[12,"text",2,[[114,"Play",45,1,1,1,-41,[14]]],[1,"7cmPpMpkdLyq8qex1na1Rw",1],[5,97.27,60],[32.991,0,0,0,0,0,1,1,1,1]],[15,"bg",3,[[2,0,-42,[15],16]],[1,"242QxOXjlJzZVdg3ArNjSu",1],[5,280,110]],[12,"icon",3,[[2,0,-43,[17],18]],[1,"d3TfFa+vNNVoB2nMjVyCfR",1],[5,50,50],[-62.692,0,0,0,0,0,1,1,1,1]],[12,"line_shop",1,[[2,0,-44,[20],21]],[1,"a5nbBPt0lKyIvNctEJma0N",1],[5,748,11],[0,-127.051,0,0,0,0,1,1,1,1]]],0,[0,6,1,0,0,1,0,0,1,0,18,7,0,19,2,0,20,3,0,21,4,0,22,6,0,0,1,0,-1,5,0,-2,6,0,-3,4,0,-4,2,0,-5,3,0,-6,16,0,0,2,0,0,2,0,-1,11,0,-2,12,0,-3,13,0,0,3,0,0,3,0,-1,14,0,-2,15,0,-3,7,0,0,4,0,0,4,0,-1,9,0,-2,10,0,0,5,0,0,5,0,-1,8,0,0,6,0,0,6,0,0,7,0,0,8,0,0,9,0,0,10,0,0,11,0,0,12,0,0,13,0,0,14,0,0,15,0,0,16,0,13,1,44],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,1,-1,1,-1,3,-1,1,-1,3,-1,1,-1,1,-1,-1,1,-1,1,-1,-1,1,-1],[0,29,0,30,0,1,0,31,0,1,0,32,0,33,0,0,34,0,35,0,0,17,0]],[[{"name":"loading_arrow","rect":[427,466,113,80],"offset":[0,0],"originalSize":[113,80],"rotated":1,"capInsets":[0,0,0,0]}],[1],0,[0],[2],[3]],[[{"name":"default_panel","rect":[0,0,20,20],"offset":[0,0],"originalSize":[20,20],"capInsets":[6,6,6,6]}],[1],0,[0],[2],[59]],[[[36,"Segment"],[135,"Segment",true,[[111,-2,[0]],[203,100,-3]],[59,-1],[0,0,0],[0,0,300,0,0,0,1,1,1,1]]],0,[0,6,1,0,0,1,0,0,1,0,13,1,3],[0],[-1],[36]],[[{"name":"default_sprite_splash","rect":[0,0,2,2],"offset":[0,0],"originalSize":[2,2],"capInsets":[0,0,0,0]}],[1],0,[0],[2],[60]],[[[204,"builtin-phong",[{"hash":3560892936,"record":null,"name":"builtin-phong|phong-vs|phong-fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\n#if CC_USE_SKINNING\n  in vec4 a_weights;\n  in vec4 a_joints;\n  #if CC_USE_JOINTS_TEXTRUE\n    uniform SKINNING {\n      vec2 jointsTextureSize;\n    };\n    uniform sampler2D jointsTexture;\n    #if CC_JOINTS_TEXTURE_FLOAT32\n      mat4 getBoneMatrix(const in float i) {\n        float width = jointsTextureSize.x;\n        float height = jointsTextureSize.y;\n        float j = i * 4.0;\n        float x = mod(j, width);\n        float y = floor(j / width);\n        float dx = 1.0 / width;\n        float dy = 1.0 / height;\n        y = dy * (y + 0.5);\n        vec4 v1 = texture(jointsTexture, vec2(dx * (x + 0.5), y));\n        vec4 v2 = texture(jointsTexture, vec2(dx * (x + 1.5), y));\n        vec4 v3 = texture(jointsTexture, vec2(dx * (x + 2.5), y));\n        vec4 v4 = texture(jointsTexture, vec2(dx * (x + 3.5), y));\n        return mat4(v1, v2, v3, v4);\n      }\n    #else\n      float decode32(vec4 rgba) {\n        float Sign = 1.0 - step(128.0, rgba[0]) * 2.0;\n        float Exponent = 2.0 * mod(rgba[0], 128.0) + step(128.0, rgba[1]) - 127.0;\n        float Mantissa = mod(rgba[1], 128.0) * 65536.0 + rgba[2] * 256.0 + rgba[3] + 8388608.0;\n        return Sign * exp2(Exponent - 23.0) * Mantissa;\n      }\n      vec4 decodevec4 (vec4 x, vec4 y, vec4 z, vec4 w) {\n        return vec4(\n          decode32(x.wzyx * 255.0),\n          decode32(y.wzyx * 255.0),\n          decode32(z.wzyx * 255.0),\n          decode32(w.wzyx * 255.0)\n        );\n      }\n      vec4 decodevec4 (float dx, float x, float y) {\n        return decodevec4(\n          texture(jointsTexture, vec2(dx * (x + 0.5), y)),\n          texture(jointsTexture, vec2(dx * (x + 1.5), y)),\n          texture(jointsTexture, vec2(dx * (x + 2.5), y)),\n          texture(jointsTexture, vec2(dx * (x + 3.5), y))\n        );\n      }\n      mat4 getBoneMatrix(const in float i) {\n        float width = jointsTextureSize.x;\n        float height = jointsTextureSize.y;\n        float j = i * 16.0;\n        float x = mod(j, width);\n        float y = floor(j / width);\n        float dx = 1.0 / width;\n        float dy = 1.0 / height;\n        y = dy * (y + 0.5);\n        vec4 v1 = decodevec4(dx, x,       y);\n        vec4 v2 = decodevec4(dx, x+4.0,   y);\n        vec4 v3 = decodevec4(dx, x+8.0,   y);\n        vec4 v4 = decodevec4(dx, x+12.0,  y);\n        return mat4(v1, v2, v3, v4);\n      }\n    #endif\n  #else\n    uniform JOINT_MATRIX {\n      mat4 jointMatrices[50];\n    };\n    mat4 getBoneMatrix(const in float i) {\n      return jointMatrices[int(i)];\n    }\n  #endif\n    mat4 skinMatrix() {\n      return\n        getBoneMatrix(a_joints.x) * a_weights.x +\n        getBoneMatrix(a_joints.y) * a_weights.y +\n        getBoneMatrix(a_joints.z) * a_weights.z +\n        getBoneMatrix(a_joints.w) * a_weights.w\n        ;\n    }\n#endif\nstruct StandardVertInput {\n  vec2 uv;\n  vec4 position;\n  vec3 normal;\n  vec4 tangent;\n  vec4 color;\n};\nin vec3 a_position;\n#if CC_USE_ATTRIBUTE_UV0\nin vec2 a_uv0;\n#endif\n#if CC_USE_ATTRIBUTE_COLOR\nin vec4 a_color;\n#endif\n#if CC_USE_ATTRIBUTE_NORMAL\nin vec3 a_normal;\n#endif\n#if CC_USE_ATTRIBUTE_TANGENT\nin vec4 a_tangent;\n#endif\nvoid CCAttribute (out StandardVertInput In) {\n  In.position = vec4(a_position, 1.0);\n  #if CC_USE_ATTRIBUTE_UV0\n    In.uv = a_uv0;\n  #else\n    In.uv = vec2(0.0);\n  #endif\n  #if CC_USE_ATTRIBUTE_COLOR\n    In.color = a_color;\n  #else\n    In.color = vec4(1.0);\n  #endif\n  #if CC_USE_ATTRIBUTE_NORMAL\n    In.normal = a_normal;\n  #else\n    In.normal = vec3(0.0, 1.0, 0.0);\n  #endif\n  #if CC_USE_ATTRIBUTE_TANGENT\n    In.tangent = a_tangent;\n  #else\n    In.tangent = vec4(1.0, 0.0, 0.0, 0.0);\n  #endif\n}\nvoid CCVertInput(out StandardVertInput In) {\n  CCAttribute(In);\n  #if CC_USE_SKINNING\n    mat4 m = skinMatrix();\n    In.position = m * In.position;\n    #if CC_USE_ATTRIBUTE_NORMAL\n      In.normal = (m * vec4(In.normal, 0)).xyz;\n    #endif\n    #if CC_USE_ATTRIBUTE_TANGENT\n      In.tangent = m * In.tangent;\n    #endif\n  #endif\n}\n#if CC_USE_SHADOW_MAP && CC_NUM_SHADOW_LIGHTS > 0\n  uniform CC_SHADOW {\n    mat4 cc_shadow_lightViewProjMatrix[2];\n    vec4 cc_shadow_info[2];\n  };\n  #if CC_NUM_SHADOW_LIGHTS > 0\n    uniform sampler2D cc_shadow_map_0;\n  #endif\n  #if CC_NUM_SHADOW_LIGHTS > 1\n    uniform sampler2D cc_shadow_map_1;\n  #endif\n  varying vec4 v_posLightSpace[2];\n  varying float v_depth[2];\n#endif\nvoid CCShadowInput (vec3 worldPos) {\n  #if CC_USE_SHADOW_MAP && CC_NUM_SHADOW_LIGHTS > 0\n  for (int i = 0; i < CC_NUM_SHADOW_LIGHTS; i++) {\n    v_posLightSpace[i] = cc_shadow_lightViewProjMatrix[i] * vec4(worldPos, 1.0);\n    v_depth[i] = (v_posLightSpace[i].z + cc_shadow_info[i].x) / (cc_shadow_info[i].x + cc_shadow_info[i].y);\n  }\n  #endif\n}\nuniform MAIN_TILING {\n  vec2 mainTiling;\n  vec2 mainOffset;\n};\n#if CC_USE_ATTRIBUTE_UV0 && (USE_DIFFUSE_TEXTURE || USE_EMISSIVE_TEXTURE || USE_SPECULAR_TEXTURE || USE_NORMAL_TEXTURE)\n  out mediump vec2 v_uv0;\n#endif\n#if CC_USE_ATTRIBUTE_COLOR\n  out lowp vec4 v_color;\n#endif\n#if USE_NORMAL_TEXTURE\n  out vec3 v_tangent;\n  out vec3 v_bitangent;\n#endif\nout vec3 v_worldNormal;\nout vec3 v_worldPos;\nout vec3 v_viewDirection;\nvoid main () {\n  StandardVertInput In;\n  CCVertInput(In);\n  vec4 position = In.position;\n  v_worldNormal = normalize((cc_matWorldIT * vec4(In.normal, 0)).xyz);\n  v_worldPos = (cc_matWorld * position).xyz;\n  v_viewDirection = normalize(cc_cameraPos.xyz - v_worldPos);\n  #if CC_USE_ATTRIBUTE_UV0 && (USE_DIFFUSE_TEXTURE || USE_EMISSIVE_TEXTURE || USE_SPECULAR_TEXTURE || USE_NORMAL_TEXTURE)\n    v_uv0 = In.uv * mainTiling + mainOffset;\n  #endif\n  #if CC_USE_ATTRIBUTE_COLOR\n    v_color = In.color;\n  #endif\n  #if USE_NORMAL_TEXTURE\n    v_tangent = normalize((cc_matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_bitangent = cross(v_worldNormal, v_tangent) * In.tangent.w;\n  #endif\n  CCShadowInput(v_worldPos);\n  gl_Position = cc_matViewProj * cc_matWorld * position;\n}","frag":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nvec4 CCFragOutput (vec4 color) {\n  #if OUTPUT_TO_GAMMA\n    color.rgb = sqrt(color.rgb);\n  #endif\n\treturn color;\n}\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform PhongFrag {\n  lowp vec4 diffuseColor;\n  lowp vec4 specularColor;\n  lowp vec4 emissiveColor;\n  float glossiness;\n};\n#if USE_DIFFUSE_TEXTURE\n  uniform sampler2D diffuseTexture;\n#endif\n#if USE_SPECULAR && USE_SPECULAR_TEXTURE\n  uniform sampler2D specularTexture;\n#endif\n#if USE_EMISSIVE && USE_EMISSIVE_TEXTURE\n  uniform sampler2D emissiveTexture;\n#endif\n#if USE_NORMAL_TEXTURE\n  in vec3 v_tangent;\n  in vec3 v_bitangent;\n  uniform sampler2D normalTexture;\n#endif\nin vec3 v_worldNormal;\nin vec3 v_worldPos;\nin vec3 v_viewDirection;\n#if CC_USE_ATTRIBUTE_UV0 && (USE_DIFFUSE_TEXTURE || (USE_EMISSIVE && USE_EMISSIVE_TEXTURE) || (USE_SPECULAR && USE_SPECULAR_TEXTURE) || USE_NORMAL_TEXTURE)\n  in mediump vec2 v_uv0;\n#endif\n#if CC_USE_ATTRIBUTE_COLOR\n  in lowp vec4 v_color;\n#endif\n#if CC_USE_SHADOW_MAP && CC_NUM_SHADOW_LIGHTS > 0\n  uniform CC_SHADOW {\n    mat4 cc_shadow_lightViewProjMatrix[2];\n    vec4 cc_shadow_info[2];\n  };\n  #if CC_NUM_SHADOW_LIGHTS > 0\n    uniform sampler2D cc_shadow_map_0;\n  #endif\n  #if CC_NUM_SHADOW_LIGHTS > 1\n    uniform sampler2D cc_shadow_map_1;\n  #endif\n  varying vec4 v_posLightSpace[2];\n  varying float v_depth[2];\n#endif\nfloat unpackRGBAToDepth(vec4 color) {\n  return dot(color, vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n}\nfloat getDepth(sampler2D shadowMap, vec2 shadowUV) {\n    return unpackRGBAToDepth(texture(shadowMap, shadowUV));\n}\nfloat computeFallOff(float shadow, vec2 coords, float frustumEdgeFalloff) {\n  return shadow;\n}\nfloat shadowSimple(sampler2D shadowMap, vec2 shadowUV, float currentDepth, float darkness) {\n  float closestDepth = getDepth(shadowMap, shadowUV);\n  return currentDepth > closestDepth  ? 1.0 - darkness : 1.0;\n}\nfloat shadowPCF3X3(sampler2D shadowMap, vec2 shadowUV, float currentDepth, float darkness, float shadowSize) {\n  float shadow = 0.0;\n  for (int x = -1; x <= 1; ++x) {\n    for (int y = -1; y <= 1; ++y) {\n      float closestDepth = getDepth(shadowMap, shadowUV + vec2(x, y) * 1.0/shadowSize);\n      shadow += currentDepth > closestDepth  ? 1.0 - darkness : 1.0;\n    }\n  }\n  shadow /= 9.0;\n  return shadow;\n}\nfloat shadowPCF5X5(sampler2D shadowMap, vec2 shadowUV, float currentDepth, float darkness, float shadowSize) {\n  float shadow = 0.0;\n  for (int x = -2; x <= 2; ++x) {\n    for (int y = -2; y <= 2; ++y) {\n      float closestDepth = getDepth(shadowMap, shadowUV + vec2(x, y) * 1.0/shadowSize);\n      shadow += currentDepth > closestDepth  ? 1.0 - darkness : 1.0;\n    }\n  }\n  shadow /= 25.0;\n  return shadow;\n}\n#if CC_NUM_LIGHTS > 0\nuniform CCLIGHTS {\n  vec4 cc_lightPositionAndRange[4];\n  vec4 cc_lightDirection[4];\n  vec4 cc_lightColor[4];\n};\n#endif\nstruct LightInfo {\n  vec3 lightDir;\n  vec3 radiance;\n  vec4 lightColor;\n};\nLightInfo computeDirectionalLighting(\n  vec4 lightDirection,\n  vec4 lightColor\n) {\n  LightInfo ret;\n  ret.lightDir = -normalize(lightDirection.xyz);\n  ret.radiance = lightColor.rgb;\n  ret.lightColor = lightColor;\n  return ret;\n}\nLightInfo computePointLighting(\n  vec3 worldPosition,\n  vec4 lightPositionAndRange,\n  vec4 lightColor\n) {\n  LightInfo ret;\n  vec3 lightDir = lightPositionAndRange.xyz - worldPosition;\n  float attenuation = max(0., 1.0 - length(lightDir) / lightPositionAndRange.w);\n  ret.lightDir = normalize(lightDir);\n  ret.radiance = lightColor.rgb * attenuation;\n  ret.lightColor = lightColor;\n  return ret;\n}\nLightInfo computeSpotLighting(\n  vec3 worldPosition,\n  vec4 lightPositionAndRange,\n  vec4 lightDirection,\n  vec4 lightColor\n) {\n  LightInfo ret;\n  vec3 lightDir = lightPositionAndRange.xyz - worldPosition;\n  float attenuation = max(0., 1.0 - length(lightDir) / lightPositionAndRange.w);\n  lightDir = normalize(lightDir);\n  float cosConeAngle = max(0., dot(lightDirection.xyz, -lightDir));\n  cosConeAngle = cosConeAngle < lightDirection.w ? 0. : cosConeAngle;\n  cosConeAngle = pow(cosConeAngle, lightColor.w);\n  ret.lightDir = lightDir;\n  ret.radiance = lightColor.rgb * attenuation * cosConeAngle;\n  ret.lightColor = lightColor;\n  return ret;\n}\nstruct Lighting {\n  vec3 diffuse;\n  vec3 specular;\n};\nstruct PhongSurface {\n  vec3 diffuse;\n  vec3 emissive;\n  vec3 specular;\n  float opacity;\n  float glossiness;\n  vec3 position;\n  vec3 normal;\n  vec3 viewDirection;\n};\nLighting brdf (PhongSurface s, LightInfo info) {\n  Lighting result;\n  float ndh = 0.0;\n  vec3 halfDir = normalize(s.viewDirection + info.lightDir);\n  float NdotH = max(0.0, dot(s.normal, halfDir));\n  NdotH = pow(NdotH, max(1.0, s.glossiness * 128.0));\n  result.diffuse = info.radiance * max(0.0, dot(s.normal, info.lightDir));\n  result.specular = info.radiance * NdotH;\n  return result;\n}\nvec4 composePhongShading (Lighting lighting, PhongSurface s) {\n  vec4 o = vec4(0.0, 0.0, 0.0, 1.0);\n  o.rgb = lighting.diffuse * s.diffuse;\n  #if USE_EMISSIVE\n    o.rgb += s.emissive;\n  #endif\n  #if USE_SPECULAR\n    o.rgb += lighting.specular * s.specular;\n  #endif\n  o.a = s.opacity;\n  return o;\n}\nvec3 ambient(PhongSurface s, vec4 ambientColor) {\n  return s.diffuse * ambientColor.rgb;\n}\nvec4 CCPhongShading (in PhongSurface s) {\n  Lighting result;\n  result.diffuse = vec3(0, 0, 0);\n  result.specular = vec3(0, 0, 0);\n  #if CC_NUM_LIGHTS > 0\n    #if CC_LIGHT_0_TYPE == 3\n      result.diffuse += ambient(s, cc_lightColor[0]);\n    #else\n      LightInfo info0;\n      #if CC_LIGHT_0_TYPE == 0\n        info0 = computeDirectionalLighting(cc_lightDirection[0], cc_lightColor[0]);\n      #elif CC_LIGHT_0_TYPE == 1\n        info0 = computePointLighting(s.position, cc_lightPositionAndRange[0], cc_lightColor[0]);\n      #elif CC_LIGHT_0_TYPE == 2\n        info0 = computeSpotLighting(s.position, cc_lightPositionAndRange[0], cc_lightDirection[0], cc_lightColor[0]);\n      #endif\n      Lighting result0 = brdf(s, info0);\n  #if CC_USE_SHADOW_MAP && CC_NUM_SHADOW_LIGHTS > 0\n    float shadow_0 = 1.0;\n    vec2 projCoords0 = v_posLightSpace[0].xy / v_posLightSpace[0].w;\n    vec2 shadowUV0 = projCoords0 * 0.5 + vec2(0.5);\n    if (shadowUV0.x >= 0.0 && shadowUV0.x <= 1.0 && shadowUV0.y >= 0.0 && shadowUV0.y <= 1.0) {\n      float currentDepth0 = clamp(v_depth[0], 0.0, 1.0);\n      #if CC_SHADOW_0_TYPE == 3\n        shadow_0 = shadowPCF3X3(cc_shadow_map_0, shadowUV0, currentDepth0, cc_shadow_info[0].w, cc_shadow_info[0].z);\n      #elif CC_SHADOW_0_TYPE == 4\n        shadow_0 = shadowPCF5X5(cc_shadow_map_0, shadowUV0, currentDepth0, cc_shadow_info[0].w, cc_shadow_info[0].z);\n      #else\n        shadow_0 = shadowSimple(cc_shadow_map_0, shadowUV0, currentDepth0, cc_shadow_info[0].w);\n      #endif\n      shadow_0 = computeFallOff(shadow_0, projCoords0, 0.0);\n    }\n    result0.diffuse *= shadow_0;\n    result0.specular *= shadow_0;\n  #endif\n      result.diffuse += result0.diffuse;\n      result.specular += result0.specular;\n    #endif\n  #endif\n  #if CC_NUM_LIGHTS > 1\n    #if CC_LIGHT_1_TYPE == 3\n      result.diffuse += ambient(s, cc_lightColor[1]);\n    #else\n      LightInfo info1;\n      #if CC_LIGHT_1_TYPE == 0\n        info1 = computeDirectionalLighting(cc_lightDirection[1], cc_lightColor[1]);\n      #elif CC_LIGHT_1_TYPE == 1\n        info1 = computePointLighting(s.position, cc_lightPositionAndRange[1], cc_lightColor[1]);\n      #elif CC_LIGHT_1_TYPE == 2\n        info1 = computeSpotLighting(s.position, cc_lightPositionAndRange[1], cc_lightDirection[1], cc_lightColor[1]);\n      #endif\n      Lighting result1 = brdf(s, info1);\n  #if CC_USE_SHADOW_MAP && CC_NUM_SHADOW_LIGHTS > 1\n    float shadow_1 = 1.0;\n    vec2 projCoords1 = v_posLightSpace[1].xy / v_posLightSpace[1].w;\n    vec2 shadowUV1 = projCoords1 * 0.5 + vec2(0.5);\n    if (shadowUV1.x >= 0.0 && shadowUV1.x <= 1.0 && shadowUV1.y >= 0.0 && shadowUV1.y <= 1.0) {\n      float currentDepth1 = clamp(v_depth[1], 0.0, 1.0);\n      #if CC_SHADOW_1_TYPE == 3\n        shadow_1 = shadowPCF3X3(cc_shadow_map_1, shadowUV1, currentDepth1, cc_shadow_info[1].w, cc_shadow_info[1].z);\n      #elif CC_SHADOW_1_TYPE == 4\n        shadow_1 = shadowPCF5X5(cc_shadow_map_1, shadowUV1, currentDepth1, cc_shadow_info[1].w, cc_shadow_info[1].z);\n      #else\n        shadow_1 = shadowSimple(cc_shadow_map_1, shadowUV1, currentDepth1, cc_shadow_info[1].w);\n      #endif\n      shadow_1 = computeFallOff(shadow_1, projCoords1, 0.0);\n    }\n    result1.diffuse *= shadow_1;\n    result1.specular *= shadow_1;\n  #endif\n      result.diffuse += result1.diffuse;\n      result.specular += result1.specular;\n    #endif\n  #endif\n  #if CC_NUM_LIGHTS > 2\n    #if CC_LIGHT_2_TYPE == 3\n      result.diffuse += ambient(s, cc_lightColor[2]);\n    #else\n      LightInfo info2;\n      #if CC_LIGHT_2_TYPE == 0\n        info2 = computeDirectionalLighting(cc_lightDirection[2], cc_lightColor[2]);\n      #elif CC_LIGHT_2_TYPE == 1\n        info2 = computePointLighting(s.position, cc_lightPositionAndRange[2], cc_lightColor[2]);\n      #elif CC_LIGHT_2_TYPE == 2\n        info2 = computeSpotLighting(s.position, cc_lightPositionAndRange[2], cc_lightDirection[2], cc_lightColor[2]);\n      #endif\n      Lighting result2 = brdf(s, info2);\n  #if CC_USE_SHADOW_MAP && CC_NUM_SHADOW_LIGHTS > 2\n    float shadow_2 = 1.0;\n    vec2 projCoords2 = v_posLightSpace[2].xy / v_posLightSpace[2].w;\n    vec2 shadowUV2 = projCoords2 * 0.5 + vec2(0.5);\n    if (shadowUV2.x >= 0.0 && shadowUV2.x <= 1.0 && shadowUV2.y >= 0.0 && shadowUV2.y <= 1.0) {\n      float currentDepth2 = clamp(v_depth[2], 0.0, 1.0);\n      #if CC_SHADOW_2_TYPE == 3\n        shadow_2 = shadowPCF3X3(cc_shadow_map_2, shadowUV2, currentDepth2, cc_shadow_info[2].w, cc_shadow_info[2].z);\n      #elif CC_SHADOW_2_TYPE == 4\n        shadow_2 = shadowPCF5X5(cc_shadow_map_2, shadowUV2, currentDepth2, cc_shadow_info[2].w, cc_shadow_info[2].z);\n      #else\n        shadow_2 = shadowSimple(cc_shadow_map_2, shadowUV2, currentDepth2, cc_shadow_info[2].w);\n      #endif\n      shadow_2 = computeFallOff(shadow_2, projCoords2, 0.0);\n    }\n    result2.diffuse *= shadow_2;\n    result2.specular *= shadow_2;\n  #endif\n      result.diffuse += result2.diffuse;\n      result.specular += result2.specular;\n    #endif\n  #endif\n  #if CC_NUM_LIGHTS > 3\n    #if CC_LIGHT_3_TYPE == 3\n      result.diffuse += ambient(s, cc_lightColor[3]);\n    #else\n      LightInfo info3;\n      #if CC_LIGHT_3_TYPE == 0\n        info3 = computeDirectionalLighting(cc_lightDirection[3], cc_lightColor[3]);\n      #elif CC_LIGHT_3_TYPE == 1\n        info3 = computePointLighting(s.position, cc_lightPositionAndRange[3], cc_lightColor[3]);\n      #elif CC_LIGHT_3_TYPE == 2\n        info3 = computeSpotLighting(s.position, cc_lightPositionAndRange[3], cc_lightDirection[3], cc_lightColor[3]);\n      #endif\n      Lighting result3 = brdf(s, info3);\n  #if CC_USE_SHADOW_MAP && CC_NUM_SHADOW_LIGHTS > 3\n    float shadow_3 = 1.0;\n    vec2 projCoords3 = v_posLightSpace[3].xy / v_posLightSpace[3].w;\n    vec2 shadowUV3 = projCoords3 * 0.5 + vec2(0.5);\n    if (shadowUV3.x >= 0.0 && shadowUV3.x <= 1.0 && shadowUV3.y >= 0.0 && shadowUV3.y <= 1.0) {\n      float currentDepth3 = clamp(v_depth[3], 0.0, 1.0);\n      #if CC_SHADOW_3_TYPE == 3\n        shadow_3 = shadowPCF3X3(cc_shadow_map_3, shadowUV3, currentDepth3, cc_shadow_info[3].w, cc_shadow_info[3].z);\n      #elif CC_SHADOW_3_TYPE == 4\n        shadow_3 = shadowPCF5X5(cc_shadow_map_3, shadowUV3, currentDepth3, cc_shadow_info[3].w, cc_shadow_info[3].z);\n      #else\n        shadow_3 = shadowSimple(cc_shadow_map_3, shadowUV3, currentDepth3, cc_shadow_info[3].w);\n      #endif\n      shadow_3 = computeFallOff(shadow_3, projCoords3, 0.0);\n    }\n    result3.diffuse *= shadow_3;\n    result3.specular *= shadow_3;\n  #endif\n      result.diffuse += result3.diffuse;\n      result.specular += result3.specular;\n    #endif\n  #endif\n  return composePhongShading(result, s);\n}\nvoid surf (out PhongSurface s) {\n  vec4 diffuse = vec4(1, 1, 1, 1);\n  #if CC_USE_ATTRIBUTE_COLOR\n    diffuse *= v_color;\n  #endif\n  diffuse *= diffuseColor;\n  #if USE_DIFFUSE_TEXTURE\n  vec4 diffuseTexture_tmp = texture(diffuseTexture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_diffuseTexture\n      diffuseTexture_tmp.a *= texture(diffuseTexture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    diffuse.rgb *= (diffuseTexture_tmp.rgb * diffuseTexture_tmp.rgb);\n    diffuse.a *= diffuseTexture_tmp.a;\n  #else\n    diffuse *= diffuseTexture_tmp;\n  #endif\n  #endif\n  ALPHA_TEST(diffuse);\n  s.diffuse = diffuse.rgb;\n  s.opacity = diffuse.a;\n  #if USE_EMISSIVE\n    s.emissive = emissiveColor.rgb;\n    #if USE_EMISSIVE_TEXTURE\n  vec4 emissiveTexture_tmp = texture(emissiveTexture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_emissiveTexture\n      emissiveTexture_tmp.a *= texture(emissiveTexture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    s.emissive.rgb *= (emissiveTexture_tmp.rgb * emissiveTexture_tmp.rgb);\n  #else\n    s.emissive.rgb *= emissiveTexture_tmp.rgb;\n  #endif\n    #endif\n  #endif\n  #if USE_SPECULAR\n    s.specular = specularColor.rgb;\n    #if USE_SPECULAR_TEXTURE\n  vec4 specularTexture_tmp = texture(specularTexture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_specularTexture\n      specularTexture_tmp.a *= texture(specularTexture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    s.specular.rgb *= (specularTexture_tmp.rgb * specularTexture_tmp.rgb);\n  #else\n    s.specular.rgb *= specularTexture_tmp.rgb;\n  #endif\n    #endif\n  #endif\n  s.normal = v_worldNormal;\n  #if USE_NORMAL_TEXTURE\n    vec3 nmmp = texture(normalTexture, v_uv0).xyz - vec3(0.5);\n    s.normal =\n      nmmp.x * normalize(v_tangent) +\n      nmmp.y * normalize(v_bitangent) +\n      nmmp.z * normalize(s.normal);\n    s.normal = normalize(s.normal);\n  #endif\n  s.position = v_worldPos;\n  s.viewDirection = v_viewDirection;\n  s.glossiness = glossiness;\n}\nvoid main () {\n  PhongSurface s;\n  surf(s);\n  vec4 color = CCPhongShading(s);\n  gl_FragColor = CCFragOutput(color);\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matWorld;\nuniform mat4 cc_matWorldIT;\nuniform mat4 cc_matViewProj;\nuniform vec4 cc_cameraPos;\n#if CC_USE_SKINNING\n  attribute vec4 a_weights;\n  attribute vec4 a_joints;\n  #if CC_USE_JOINTS_TEXTRUE\n    uniform vec2 jointsTextureSize;\n    uniform sampler2D jointsTexture;\n    #if CC_JOINTS_TEXTURE_FLOAT32\n      mat4 getBoneMatrix(const in float i) {\n        float width = jointsTextureSize.x;\n        float height = jointsTextureSize.y;\n        float j = i * 4.0;\n        float x = mod(j, width);\n        float y = floor(j / width);\n        float dx = 1.0 / width;\n        float dy = 1.0 / height;\n        y = dy * (y + 0.5);\n        vec4 v1 = texture2D(jointsTexture, vec2(dx * (x + 0.5), y));\n        vec4 v2 = texture2D(jointsTexture, vec2(dx * (x + 1.5), y));\n        vec4 v3 = texture2D(jointsTexture, vec2(dx * (x + 2.5), y));\n        vec4 v4 = texture2D(jointsTexture, vec2(dx * (x + 3.5), y));\n        return mat4(v1, v2, v3, v4);\n      }\n    #else\n      float decode32(vec4 rgba) {\n        float Sign = 1.0 - step(128.0, rgba[0]) * 2.0;\n        float Exponent = 2.0 * mod(rgba[0], 128.0) + step(128.0, rgba[1]) - 127.0;\n        float Mantissa = mod(rgba[1], 128.0) * 65536.0 + rgba[2] * 256.0 + rgba[3] + 8388608.0;\n        return Sign * exp2(Exponent - 23.0) * Mantissa;\n      }\n      vec4 decodevec4 (vec4 x, vec4 y, vec4 z, vec4 w) {\n        return vec4(\n          decode32(x.wzyx * 255.0),\n          decode32(y.wzyx * 255.0),\n          decode32(z.wzyx * 255.0),\n          decode32(w.wzyx * 255.0)\n        );\n      }\n      vec4 decodevec4 (float dx, float x, float y) {\n        return decodevec4(\n          texture2D(jointsTexture, vec2(dx * (x + 0.5), y)),\n          texture2D(jointsTexture, vec2(dx * (x + 1.5), y)),\n          texture2D(jointsTexture, vec2(dx * (x + 2.5), y)),\n          texture2D(jointsTexture, vec2(dx * (x + 3.5), y))\n        );\n      }\n      mat4 getBoneMatrix(const in float i) {\n        float width = jointsTextureSize.x;\n        float height = jointsTextureSize.y;\n        float j = i * 16.0;\n        float x = mod(j, width);\n        float y = floor(j / width);\n        float dx = 1.0 / width;\n        float dy = 1.0 / height;\n        y = dy * (y + 0.5);\n        vec4 v1 = decodevec4(dx, x,       y);\n        vec4 v2 = decodevec4(dx, x+4.0,   y);\n        vec4 v3 = decodevec4(dx, x+8.0,   y);\n        vec4 v4 = decodevec4(dx, x+12.0,  y);\n        return mat4(v1, v2, v3, v4);\n      }\n    #endif\n  #else\n    uniform mat4 jointMatrices[50];\n    mat4 getBoneMatrix(const in float i) {\n      return jointMatrices[int(i)];\n    }\n  #endif\n    mat4 skinMatrix() {\n      return\n        getBoneMatrix(a_joints.x) * a_weights.x +\n        getBoneMatrix(a_joints.y) * a_weights.y +\n        getBoneMatrix(a_joints.z) * a_weights.z +\n        getBoneMatrix(a_joints.w) * a_weights.w\n        ;\n    }\n#endif\nstruct StandardVertInput {\n  vec2 uv;\n  vec4 position;\n  vec3 normal;\n  vec4 tangent;\n  vec4 color;\n};\nattribute vec3 a_position;\n#if CC_USE_ATTRIBUTE_UV0\nattribute vec2 a_uv0;\n#endif\n#if CC_USE_ATTRIBUTE_COLOR\nattribute vec4 a_color;\n#endif\n#if CC_USE_ATTRIBUTE_NORMAL\nattribute vec3 a_normal;\n#endif\n#if CC_USE_ATTRIBUTE_TANGENT\nattribute vec4 a_tangent;\n#endif\nvoid CCAttribute (out StandardVertInput In) {\n  In.position = vec4(a_position, 1.0);\n  #if CC_USE_ATTRIBUTE_UV0\n    In.uv = a_uv0;\n  #else\n    In.uv = vec2(0.0);\n  #endif\n  #if CC_USE_ATTRIBUTE_COLOR\n    In.color = a_color;\n  #else\n    In.color = vec4(1.0);\n  #endif\n  #if CC_USE_ATTRIBUTE_NORMAL\n    In.normal = a_normal;\n  #else\n    In.normal = vec3(0.0, 1.0, 0.0);\n  #endif\n  #if CC_USE_ATTRIBUTE_TANGENT\n    In.tangent = a_tangent;\n  #else\n    In.tangent = vec4(1.0, 0.0, 0.0, 0.0);\n  #endif\n}\nvoid CCVertInput(out StandardVertInput In) {\n  CCAttribute(In);\n  #if CC_USE_SKINNING\n    mat4 m = skinMatrix();\n    In.position = m * In.position;\n    #if CC_USE_ATTRIBUTE_NORMAL\n      In.normal = (m * vec4(In.normal, 0)).xyz;\n    #endif\n    #if CC_USE_ATTRIBUTE_TANGENT\n      In.tangent = m * In.tangent;\n    #endif\n  #endif\n}\n#if CC_USE_SHADOW_MAP && CC_NUM_SHADOW_LIGHTS > 0\n  uniform mat4 cc_shadow_lightViewProjMatrix[2];\nuniform vec4 cc_shadow_info[2];\n  #if CC_NUM_SHADOW_LIGHTS > 0\n    uniform sampler2D cc_shadow_map_0;\n  #endif\n  #if CC_NUM_SHADOW_LIGHTS > 1\n    uniform sampler2D cc_shadow_map_1;\n  #endif\n  varying vec4 v_posLightSpace[2];\n  varying float v_depth[2];\n#endif\nvoid CCShadowInput (vec3 worldPos) {\n  #if CC_USE_SHADOW_MAP && CC_NUM_SHADOW_LIGHTS > 0\n  for (int i = 0; i < CC_NUM_SHADOW_LIGHTS; i++) {\n    v_posLightSpace[i] = cc_shadow_lightViewProjMatrix[i] * vec4(worldPos, 1.0);\n    v_depth[i] = (v_posLightSpace[i].z + cc_shadow_info[i].x) / (cc_shadow_info[i].x + cc_shadow_info[i].y);\n  }\n  #endif\n}\nuniform vec2 mainTiling;\nuniform vec2 mainOffset;\n#if CC_USE_ATTRIBUTE_UV0 && (USE_DIFFUSE_TEXTURE || USE_EMISSIVE_TEXTURE || USE_SPECULAR_TEXTURE || USE_NORMAL_TEXTURE)\n  varying mediump vec2 v_uv0;\n#endif\n#if CC_USE_ATTRIBUTE_COLOR\n  varying lowp vec4 v_color;\n#endif\n#if USE_NORMAL_TEXTURE\n  varying vec3 v_tangent;\n  varying vec3 v_bitangent;\n#endif\nvarying vec3 v_worldNormal;\nvarying vec3 v_worldPos;\nvarying vec3 v_viewDirection;\nvoid main () {\n  StandardVertInput In;\n  CCVertInput(In);\n  vec4 position = In.position;\n  v_worldNormal = normalize((cc_matWorldIT * vec4(In.normal, 0)).xyz);\n  v_worldPos = (cc_matWorld * position).xyz;\n  v_viewDirection = normalize(cc_cameraPos.xyz - v_worldPos);\n  #if CC_USE_ATTRIBUTE_UV0 && (USE_DIFFUSE_TEXTURE || USE_EMISSIVE_TEXTURE || USE_SPECULAR_TEXTURE || USE_NORMAL_TEXTURE)\n    v_uv0 = In.uv * mainTiling + mainOffset;\n  #endif\n  #if CC_USE_ATTRIBUTE_COLOR\n    v_color = In.color;\n  #endif\n  #if USE_NORMAL_TEXTURE\n    v_tangent = normalize((cc_matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_bitangent = cross(v_worldNormal, v_tangent) * In.tangent.w;\n  #endif\n  CCShadowInput(v_worldPos);\n  gl_Position = cc_matViewProj * cc_matWorld * position;\n}","frag":"\nprecision highp float;\nvec4 CCFragOutput (vec4 color) {\n  #if OUTPUT_TO_GAMMA\n    color.rgb = sqrt(color.rgb);\n  #endif\n\treturn color;\n}\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform lowp vec4 diffuseColor;\nuniform lowp vec4 specularColor;\nuniform lowp vec4 emissiveColor;\nuniform float glossiness;\n#if USE_DIFFUSE_TEXTURE\n  uniform sampler2D diffuseTexture;\n#endif\n#if USE_SPECULAR && USE_SPECULAR_TEXTURE\n  uniform sampler2D specularTexture;\n#endif\n#if USE_EMISSIVE && USE_EMISSIVE_TEXTURE\n  uniform sampler2D emissiveTexture;\n#endif\n#if USE_NORMAL_TEXTURE\n  varying vec3 v_tangent;\n  varying vec3 v_bitangent;\n  uniform sampler2D normalTexture;\n#endif\nvarying vec3 v_worldNormal;\nvarying vec3 v_worldPos;\nvarying vec3 v_viewDirection;\n#if CC_USE_ATTRIBUTE_UV0 && (USE_DIFFUSE_TEXTURE || (USE_EMISSIVE && USE_EMISSIVE_TEXTURE) || (USE_SPECULAR && USE_SPECULAR_TEXTURE) || USE_NORMAL_TEXTURE)\n  varying mediump vec2 v_uv0;\n#endif\n#if CC_USE_ATTRIBUTE_COLOR\n  varying lowp vec4 v_color;\n#endif\n#if CC_USE_SHADOW_MAP && CC_NUM_SHADOW_LIGHTS > 0\n  uniform vec4 cc_shadow_info[2];\n  #if CC_NUM_SHADOW_LIGHTS > 0\n    uniform sampler2D cc_shadow_map_0;\n  #endif\n  #if CC_NUM_SHADOW_LIGHTS > 1\n    uniform sampler2D cc_shadow_map_1;\n  #endif\n  varying vec4 v_posLightSpace[2];\n  varying float v_depth[2];\n#endif\nfloat unpackRGBAToDepth(vec4 color) {\n  return dot(color, vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n}\nfloat getDepth(sampler2D shadowMap, vec2 shadowUV) {\n    return unpackRGBAToDepth(texture2D(shadowMap, shadowUV));\n}\nfloat computeFallOff(float shadow, vec2 coords, float frustumEdgeFalloff) {\n  return shadow;\n}\nfloat shadowSimple(sampler2D shadowMap, vec2 shadowUV, float currentDepth, float darkness) {\n  float closestDepth = getDepth(shadowMap, shadowUV);\n  return currentDepth > closestDepth  ? 1.0 - darkness : 1.0;\n}\nfloat shadowPCF3X3(sampler2D shadowMap, vec2 shadowUV, float currentDepth, float darkness, float shadowSize) {\n  float shadow = 0.0;\n  for (int x = -1; x <= 1; ++x) {\n    for (int y = -1; y <= 1; ++y) {\n      float closestDepth = getDepth(shadowMap, shadowUV + vec2(x, y) * 1.0/shadowSize);\n      shadow += currentDepth > closestDepth  ? 1.0 - darkness : 1.0;\n    }\n  }\n  shadow /= 9.0;\n  return shadow;\n}\nfloat shadowPCF5X5(sampler2D shadowMap, vec2 shadowUV, float currentDepth, float darkness, float shadowSize) {\n  float shadow = 0.0;\n  for (int x = -2; x <= 2; ++x) {\n    for (int y = -2; y <= 2; ++y) {\n      float closestDepth = getDepth(shadowMap, shadowUV + vec2(x, y) * 1.0/shadowSize);\n      shadow += currentDepth > closestDepth  ? 1.0 - darkness : 1.0;\n    }\n  }\n  shadow /= 25.0;\n  return shadow;\n}\n#if CC_NUM_LIGHTS > 0\nuniform vec4 cc_lightPositionAndRange[4];\nuniform vec4 cc_lightDirection[4];\nuniform vec4 cc_lightColor[4];\n#endif\nstruct LightInfo {\n  vec3 lightDir;\n  vec3 radiance;\n  vec4 lightColor;\n};\nLightInfo computeDirectionalLighting(\n  vec4 lightDirection,\n  vec4 lightColor\n) {\n  LightInfo ret;\n  ret.lightDir = -normalize(lightDirection.xyz);\n  ret.radiance = lightColor.rgb;\n  ret.lightColor = lightColor;\n  return ret;\n}\nLightInfo computePointLighting(\n  vec3 worldPosition,\n  vec4 lightPositionAndRange,\n  vec4 lightColor\n) {\n  LightInfo ret;\n  vec3 lightDir = lightPositionAndRange.xyz - worldPosition;\n  float attenuation = max(0., 1.0 - length(lightDir) / lightPositionAndRange.w);\n  ret.lightDir = normalize(lightDir);\n  ret.radiance = lightColor.rgb * attenuation;\n  ret.lightColor = lightColor;\n  return ret;\n}\nLightInfo computeSpotLighting(\n  vec3 worldPosition,\n  vec4 lightPositionAndRange,\n  vec4 lightDirection,\n  vec4 lightColor\n) {\n  LightInfo ret;\n  vec3 lightDir = lightPositionAndRange.xyz - worldPosition;\n  float attenuation = max(0., 1.0 - length(lightDir) / lightPositionAndRange.w);\n  lightDir = normalize(lightDir);\n  float cosConeAngle = max(0., dot(lightDirection.xyz, -lightDir));\n  cosConeAngle = cosConeAngle < lightDirection.w ? 0. : cosConeAngle;\n  cosConeAngle = pow(cosConeAngle, lightColor.w);\n  ret.lightDir = lightDir;\n  ret.radiance = lightColor.rgb * attenuation * cosConeAngle;\n  ret.lightColor = lightColor;\n  return ret;\n}\nstruct Lighting {\n  vec3 diffuse;\n  vec3 specular;\n};\nstruct PhongSurface {\n  vec3 diffuse;\n  vec3 emissive;\n  vec3 specular;\n  float opacity;\n  float glossiness;\n  vec3 position;\n  vec3 normal;\n  vec3 viewDirection;\n};\nLighting brdf (PhongSurface s, LightInfo info) {\n  Lighting result;\n  float ndh = 0.0;\n  vec3 halfDir = normalize(s.viewDirection + info.lightDir);\n  float NdotH = max(0.0, dot(s.normal, halfDir));\n  NdotH = pow(NdotH, max(1.0, s.glossiness * 128.0));\n  result.diffuse = info.radiance * max(0.0, dot(s.normal, info.lightDir));\n  result.specular = info.radiance * NdotH;\n  return result;\n}\nvec4 composePhongShading (Lighting lighting, PhongSurface s) {\n  vec4 o = vec4(0.0, 0.0, 0.0, 1.0);\n  o.rgb = lighting.diffuse * s.diffuse;\n  #if USE_EMISSIVE\n    o.rgb += s.emissive;\n  #endif\n  #if USE_SPECULAR\n    o.rgb += lighting.specular * s.specular;\n  #endif\n  o.a = s.opacity;\n  return o;\n}\nvec3 ambient(PhongSurface s, vec4 ambientColor) {\n  return s.diffuse * ambientColor.rgb;\n}\nvec4 CCPhongShading (in PhongSurface s) {\n  Lighting result;\n  result.diffuse = vec3(0, 0, 0);\n  result.specular = vec3(0, 0, 0);\n  #if CC_NUM_LIGHTS > 0\n    #if CC_LIGHT_0_TYPE == 3\n      result.diffuse += ambient(s, cc_lightColor[0]);\n    #else\n      LightInfo info0;\n      #if CC_LIGHT_0_TYPE == 0\n        info0 = computeDirectionalLighting(cc_lightDirection[0], cc_lightColor[0]);\n      #elif CC_LIGHT_0_TYPE == 1\n        info0 = computePointLighting(s.position, cc_lightPositionAndRange[0], cc_lightColor[0]);\n      #elif CC_LIGHT_0_TYPE == 2\n        info0 = computeSpotLighting(s.position, cc_lightPositionAndRange[0], cc_lightDirection[0], cc_lightColor[0]);\n      #endif\n      Lighting result0 = brdf(s, info0);\n  #if CC_USE_SHADOW_MAP && CC_NUM_SHADOW_LIGHTS > 0\n    float shadow_0 = 1.0;\n    vec2 projCoords0 = v_posLightSpace[0].xy / v_posLightSpace[0].w;\n    vec2 shadowUV0 = projCoords0 * 0.5 + vec2(0.5);\n    if (shadowUV0.x >= 0.0 && shadowUV0.x <= 1.0 && shadowUV0.y >= 0.0 && shadowUV0.y <= 1.0) {\n      float currentDepth0 = clamp(v_depth[0], 0.0, 1.0);\n      #if CC_SHADOW_0_TYPE == 3\n        shadow_0 = shadowPCF3X3(cc_shadow_map_0, shadowUV0, currentDepth0, cc_shadow_info[0].w, cc_shadow_info[0].z);\n      #elif CC_SHADOW_0_TYPE == 4\n        shadow_0 = shadowPCF5X5(cc_shadow_map_0, shadowUV0, currentDepth0, cc_shadow_info[0].w, cc_shadow_info[0].z);\n      #else\n        shadow_0 = shadowSimple(cc_shadow_map_0, shadowUV0, currentDepth0, cc_shadow_info[0].w);\n      #endif\n      shadow_0 = computeFallOff(shadow_0, projCoords0, 0.0);\n    }\n    result0.diffuse *= shadow_0;\n    result0.specular *= shadow_0;\n  #endif\n      result.diffuse += result0.diffuse;\n      result.specular += result0.specular;\n    #endif\n  #endif\n  #if CC_NUM_LIGHTS > 1\n    #if CC_LIGHT_1_TYPE == 3\n      result.diffuse += ambient(s, cc_lightColor[1]);\n    #else\n      LightInfo info1;\n      #if CC_LIGHT_1_TYPE == 0\n        info1 = computeDirectionalLighting(cc_lightDirection[1], cc_lightColor[1]);\n      #elif CC_LIGHT_1_TYPE == 1\n        info1 = computePointLighting(s.position, cc_lightPositionAndRange[1], cc_lightColor[1]);\n      #elif CC_LIGHT_1_TYPE == 2\n        info1 = computeSpotLighting(s.position, cc_lightPositionAndRange[1], cc_lightDirection[1], cc_lightColor[1]);\n      #endif\n      Lighting result1 = brdf(s, info1);\n  #if CC_USE_SHADOW_MAP && CC_NUM_SHADOW_LIGHTS > 1\n    float shadow_1 = 1.0;\n    vec2 projCoords1 = v_posLightSpace[1].xy / v_posLightSpace[1].w;\n    vec2 shadowUV1 = projCoords1 * 0.5 + vec2(0.5);\n    if (shadowUV1.x >= 0.0 && shadowUV1.x <= 1.0 && shadowUV1.y >= 0.0 && shadowUV1.y <= 1.0) {\n      float currentDepth1 = clamp(v_depth[1], 0.0, 1.0);\n      #if CC_SHADOW_1_TYPE == 3\n        shadow_1 = shadowPCF3X3(cc_shadow_map_1, shadowUV1, currentDepth1, cc_shadow_info[1].w, cc_shadow_info[1].z);\n      #elif CC_SHADOW_1_TYPE == 4\n        shadow_1 = shadowPCF5X5(cc_shadow_map_1, shadowUV1, currentDepth1, cc_shadow_info[1].w, cc_shadow_info[1].z);\n      #else\n        shadow_1 = shadowSimple(cc_shadow_map_1, shadowUV1, currentDepth1, cc_shadow_info[1].w);\n      #endif\n      shadow_1 = computeFallOff(shadow_1, projCoords1, 0.0);\n    }\n    result1.diffuse *= shadow_1;\n    result1.specular *= shadow_1;\n  #endif\n      result.diffuse += result1.diffuse;\n      result.specular += result1.specular;\n    #endif\n  #endif\n  #if CC_NUM_LIGHTS > 2\n    #if CC_LIGHT_2_TYPE == 3\n      result.diffuse += ambient(s, cc_lightColor[2]);\n    #else\n      LightInfo info2;\n      #if CC_LIGHT_2_TYPE == 0\n        info2 = computeDirectionalLighting(cc_lightDirection[2], cc_lightColor[2]);\n      #elif CC_LIGHT_2_TYPE == 1\n        info2 = computePointLighting(s.position, cc_lightPositionAndRange[2], cc_lightColor[2]);\n      #elif CC_LIGHT_2_TYPE == 2\n        info2 = computeSpotLighting(s.position, cc_lightPositionAndRange[2], cc_lightDirection[2], cc_lightColor[2]);\n      #endif\n      Lighting result2 = brdf(s, info2);\n  #if CC_USE_SHADOW_MAP && CC_NUM_SHADOW_LIGHTS > 2\n    float shadow_2 = 1.0;\n    vec2 projCoords2 = v_posLightSpace[2].xy / v_posLightSpace[2].w;\n    vec2 shadowUV2 = projCoords2 * 0.5 + vec2(0.5);\n    if (shadowUV2.x >= 0.0 && shadowUV2.x <= 1.0 && shadowUV2.y >= 0.0 && shadowUV2.y <= 1.0) {\n      float currentDepth2 = clamp(v_depth[2], 0.0, 1.0);\n      #if CC_SHADOW_2_TYPE == 3\n        shadow_2 = shadowPCF3X3(cc_shadow_map_2, shadowUV2, currentDepth2, cc_shadow_info[2].w, cc_shadow_info[2].z);\n      #elif CC_SHADOW_2_TYPE == 4\n        shadow_2 = shadowPCF5X5(cc_shadow_map_2, shadowUV2, currentDepth2, cc_shadow_info[2].w, cc_shadow_info[2].z);\n      #else\n        shadow_2 = shadowSimple(cc_shadow_map_2, shadowUV2, currentDepth2, cc_shadow_info[2].w);\n      #endif\n      shadow_2 = computeFallOff(shadow_2, projCoords2, 0.0);\n    }\n    result2.diffuse *= shadow_2;\n    result2.specular *= shadow_2;\n  #endif\n      result.diffuse += result2.diffuse;\n      result.specular += result2.specular;\n    #endif\n  #endif\n  #if CC_NUM_LIGHTS > 3\n    #if CC_LIGHT_3_TYPE == 3\n      result.diffuse += ambient(s, cc_lightColor[3]);\n    #else\n      LightInfo info3;\n      #if CC_LIGHT_3_TYPE == 0\n        info3 = computeDirectionalLighting(cc_lightDirection[3], cc_lightColor[3]);\n      #elif CC_LIGHT_3_TYPE == 1\n        info3 = computePointLighting(s.position, cc_lightPositionAndRange[3], cc_lightColor[3]);\n      #elif CC_LIGHT_3_TYPE == 2\n        info3 = computeSpotLighting(s.position, cc_lightPositionAndRange[3], cc_lightDirection[3], cc_lightColor[3]);\n      #endif\n      Lighting result3 = brdf(s, info3);\n  #if CC_USE_SHADOW_MAP && CC_NUM_SHADOW_LIGHTS > 3\n    float shadow_3 = 1.0;\n    vec2 projCoords3 = v_posLightSpace[3].xy / v_posLightSpace[3].w;\n    vec2 shadowUV3 = projCoords3 * 0.5 + vec2(0.5);\n    if (shadowUV3.x >= 0.0 && shadowUV3.x <= 1.0 && shadowUV3.y >= 0.0 && shadowUV3.y <= 1.0) {\n      float currentDepth3 = clamp(v_depth[3], 0.0, 1.0);\n      #if CC_SHADOW_3_TYPE == 3\n        shadow_3 = shadowPCF3X3(cc_shadow_map_3, shadowUV3, currentDepth3, cc_shadow_info[3].w, cc_shadow_info[3].z);\n      #elif CC_SHADOW_3_TYPE == 4\n        shadow_3 = shadowPCF5X5(cc_shadow_map_3, shadowUV3, currentDepth3, cc_shadow_info[3].w, cc_shadow_info[3].z);\n      #else\n        shadow_3 = shadowSimple(cc_shadow_map_3, shadowUV3, currentDepth3, cc_shadow_info[3].w);\n      #endif\n      shadow_3 = computeFallOff(shadow_3, projCoords3, 0.0);\n    }\n    result3.diffuse *= shadow_3;\n    result3.specular *= shadow_3;\n  #endif\n      result.diffuse += result3.diffuse;\n      result.specular += result3.specular;\n    #endif\n  #endif\n  return composePhongShading(result, s);\n}\nvoid surf (out PhongSurface s) {\n  vec4 diffuse = vec4(1, 1, 1, 1);\n  #if CC_USE_ATTRIBUTE_COLOR\n    diffuse *= v_color;\n  #endif\n  diffuse *= diffuseColor;\n  #if USE_DIFFUSE_TEXTURE\n  vec4 diffuseTexture_tmp = texture2D(diffuseTexture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_diffuseTexture\n      diffuseTexture_tmp.a *= texture2D(diffuseTexture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    diffuse.rgb *= (diffuseTexture_tmp.rgb * diffuseTexture_tmp.rgb);\n    diffuse.a *= diffuseTexture_tmp.a;\n  #else\n    diffuse *= diffuseTexture_tmp;\n  #endif\n  #endif\n  ALPHA_TEST(diffuse);\n  s.diffuse = diffuse.rgb;\n  s.opacity = diffuse.a;\n  #if USE_EMISSIVE\n    s.emissive = emissiveColor.rgb;\n    #if USE_EMISSIVE_TEXTURE\n  vec4 emissiveTexture_tmp = texture2D(emissiveTexture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_emissiveTexture\n      emissiveTexture_tmp.a *= texture2D(emissiveTexture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    s.emissive.rgb *= (emissiveTexture_tmp.rgb * emissiveTexture_tmp.rgb);\n  #else\n    s.emissive.rgb *= emissiveTexture_tmp.rgb;\n  #endif\n    #endif\n  #endif\n  #if USE_SPECULAR\n    s.specular = specularColor.rgb;\n    #if USE_SPECULAR_TEXTURE\n  vec4 specularTexture_tmp = texture2D(specularTexture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_specularTexture\n      specularTexture_tmp.a *= texture2D(specularTexture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    s.specular.rgb *= (specularTexture_tmp.rgb * specularTexture_tmp.rgb);\n  #else\n    s.specular.rgb *= specularTexture_tmp.rgb;\n  #endif\n    #endif\n  #endif\n  s.normal = v_worldNormal;\n  #if USE_NORMAL_TEXTURE\n    vec3 nmmp = texture2D(normalTexture, v_uv0).xyz - vec3(0.5);\n    s.normal =\n      nmmp.x * normalize(v_tangent) +\n      nmmp.y * normalize(v_bitangent) +\n      nmmp.z * normalize(s.normal);\n    s.normal = normalize(s.normal);\n  #endif\n  s.position = v_worldPos;\n  s.viewDirection = v_viewDirection;\n  s.glossiness = glossiness;\n}\nvoid main () {\n  PhongSurface s;\n  surf(s);\n  vec4 color = CCPhongShading(s);\n  gl_FragColor = CCFragOutput(color);\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CC_SHADOW","defines":["CC_USE_SHADOW_MAP","CC_NUM_SHADOW_LIGHTS"]},{"name":"CCLIGHTS","defines":["CC_NUM_LIGHTS"]}],"samplers":[{"name":"cc_shadow_map_0","defines":["CC_USE_SHADOW_MAP","CC_NUM_SHADOW_LIGHTS"]},{"name":"cc_shadow_map_1","defines":["CC_USE_SHADOW_MAP","CC_NUM_SHADOW_LIGHTS"]}]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"CC_USE_SKINNING","type":"boolean","defines":[]},{"name":"CC_USE_JOINTS_TEXTRUE","type":"boolean","defines":["CC_USE_SKINNING"]},{"name":"CC_JOINTS_TEXTURE_FLOAT32","type":"boolean","defines":["CC_USE_SKINNING","CC_USE_JOINTS_TEXTRUE"]},{"name":"CC_USE_ATTRIBUTE_UV0","type":"boolean","defines":[]},{"name":"CC_USE_ATTRIBUTE_COLOR","type":"boolean","defines":[]},{"name":"CC_USE_ATTRIBUTE_NORMAL","type":"boolean","defines":[]},{"name":"CC_USE_ATTRIBUTE_TANGENT","type":"boolean","defines":[]},{"name":"CC_USE_SHADOW_MAP","type":"boolean","defines":[]},{"name":"CC_NUM_SHADOW_LIGHTS","type":"number","defines":["CC_USE_SHADOW_MAP"],"range":[0,3]},{"name":"USE_DIFFUSE_TEXTURE","type":"boolean","defines":[]},{"name":"USE_NORMAL_TEXTURE","type":"boolean","defines":[]},{"name":"OUTPUT_TO_GAMMA","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"USE_SPECULAR","type":"boolean","defines":[]},{"name":"USE_SPECULAR_TEXTURE","type":"boolean","defines":["USE_SPECULAR"]},{"name":"USE_EMISSIVE","type":"boolean","defines":[]},{"name":"USE_EMISSIVE_TEXTURE","type":"boolean","defines":["USE_EMISSIVE"]},{"name":"CC_NUM_LIGHTS","type":"number","defines":[],"range":[0,3]},{"name":"CC_LIGHT_0_TYPE","type":"number","defines":["CC_NUM_LIGHTS"],"range":[0,3]},{"name":"CC_SHADOW_0_TYPE","type":"number","defines":["CC_NUM_LIGHTS","CC_USE_SHADOW_MAP","CC_NUM_SHADOW_LIGHTS"],"range":[0,3]},{"name":"CC_LIGHT_1_TYPE","type":"number","defines":["CC_NUM_LIGHTS"],"range":[0,3]},{"name":"CC_SHADOW_1_TYPE","type":"number","defines":["CC_NUM_LIGHTS","CC_USE_SHADOW_MAP","CC_NUM_SHADOW_LIGHTS"],"range":[0,3]},{"name":"CC_LIGHT_2_TYPE","type":"number","defines":["CC_NUM_LIGHTS"],"range":[0,3]},{"name":"CC_SHADOW_2_TYPE","type":"number","defines":["CC_NUM_LIGHTS","CC_USE_SHADOW_MAP","CC_NUM_SHADOW_LIGHTS"],"range":[0,3]},{"name":"CC_LIGHT_3_TYPE","type":"number","defines":["CC_NUM_LIGHTS"],"range":[0,3]},{"name":"CC_SHADOW_3_TYPE","type":"number","defines":["CC_NUM_LIGHTS","CC_USE_SHADOW_MAP","CC_NUM_SHADOW_LIGHTS"],"range":[0,3]},{"name":"CC_USE_ALPHA_ATLAS_diffuseTexture","type":"boolean","defines":["USE_DIFFUSE_TEXTURE"]},{"name":"INPUT_IS_GAMMA","type":"boolean","defines":["USE_DIFFUSE_TEXTURE"]},{"name":"CC_USE_ALPHA_ATLAS_emissiveTexture","type":"boolean","defines":["USE_EMISSIVE","USE_EMISSIVE_TEXTURE"]},{"name":"CC_USE_ALPHA_ATLAS_specularTexture","type":"boolean","defines":["USE_SPECULAR","USE_SPECULAR_TEXTURE"]}],"blocks":[{"name":"SKINNING","binding":0,"members":[{"name":"jointsTextureSize","type":14,"count":1}],"defines":["CC_USE_SKINNING","CC_USE_JOINTS_TEXTRUE"]},{"name":"JOINT_MATRIX","binding":1,"members":[{"name":"jointMatrices","type":26,"count":50}],"defines":["CC_USE_SKINNING"]},{"name":"MAIN_TILING","binding":2,"members":[{"name":"mainTiling","type":14,"count":1},{"name":"mainOffset","type":14,"count":1}],"defines":[]},{"name":"ALPHA_TEST","binding":3,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"PhongFrag","binding":4,"members":[{"name":"diffuseColor","type":16,"count":1},{"name":"specularColor","type":16,"count":1},{"name":"emissiveColor","type":16,"count":1},{"name":"glossiness","type":13,"count":1}],"defines":[]}],"samplers":[{"name":"jointsTexture","type":29,"count":1,"binding":30,"defines":["CC_USE_SKINNING","CC_USE_JOINTS_TEXTRUE"]},{"name":"diffuseTexture","type":29,"count":1,"binding":31,"defines":["USE_DIFFUSE_TEXTURE"]},{"name":"specularTexture","type":29,"count":1,"binding":32,"defines":["USE_SPECULAR","USE_SPECULAR_TEXTURE"]},{"name":"emissiveTexture","type":29,"count":1,"binding":33,"defines":["USE_EMISSIVE","USE_EMISSIVE_TEXTURE"]},{"name":"normalTexture","type":29,"count":1,"binding":34,"defines":["USE_NORMAL_TEXTURE"]}]},{"hash":1165371292,"record":null,"name":"builtin-phong|shadow-map-vs|shadow-map-fs","glsl3":{"vert":"\nprecision highp float;\nin vec3 a_position;\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nuniform CC_SHADOW_MAP {\n  mat4  cc_shadow_map_lightViewProjMatrix;\n  vec4  cc_shadow_map_info;\n  float cc_shadow_map_bias;\n};\nout float v_depth;\n#if CC_USE_SKINNING\n  in vec4 a_weights;\n  in vec4 a_joints;\n  #if CC_USE_JOINTS_TEXTRUE\n    uniform SKINNING {\n      vec2 jointsTextureSize;\n    };\n    uniform sampler2D jointsTexture;\n    #if CC_JOINTS_TEXTURE_FLOAT32\n      mat4 getBoneMatrix(const in float i) {\n        float width = jointsTextureSize.x;\n        float height = jointsTextureSize.y;\n        float j = i * 4.0;\n        float x = mod(j, width);\n        float y = floor(j / width);\n        float dx = 1.0 / width;\n        float dy = 1.0 / height;\n        y = dy * (y + 0.5);\n        vec4 v1 = texture(jointsTexture, vec2(dx * (x + 0.5), y));\n        vec4 v2 = texture(jointsTexture, vec2(dx * (x + 1.5), y));\n        vec4 v3 = texture(jointsTexture, vec2(dx * (x + 2.5), y));\n        vec4 v4 = texture(jointsTexture, vec2(dx * (x + 3.5), y));\n        return mat4(v1, v2, v3, v4);\n      }\n    #else\n      float decode32(vec4 rgba) {\n        float Sign = 1.0 - step(128.0, rgba[0]) * 2.0;\n        float Exponent = 2.0 * mod(rgba[0], 128.0) + step(128.0, rgba[1]) - 127.0;\n        float Mantissa = mod(rgba[1], 128.0) * 65536.0 + rgba[2] * 256.0 + rgba[3] + 8388608.0;\n        return Sign * exp2(Exponent - 23.0) * Mantissa;\n      }\n      vec4 decodevec4 (vec4 x, vec4 y, vec4 z, vec4 w) {\n        return vec4(\n          decode32(x.wzyx * 255.0),\n          decode32(y.wzyx * 255.0),\n          decode32(z.wzyx * 255.0),\n          decode32(w.wzyx * 255.0)\n        );\n      }\n      vec4 decodevec4 (float dx, float x, float y) {\n        return decodevec4(\n          texture(jointsTexture, vec2(dx * (x + 0.5), y)),\n          texture(jointsTexture, vec2(dx * (x + 1.5), y)),\n          texture(jointsTexture, vec2(dx * (x + 2.5), y)),\n          texture(jointsTexture, vec2(dx * (x + 3.5), y))\n        );\n      }\n      mat4 getBoneMatrix(const in float i) {\n        float width = jointsTextureSize.x;\n        float height = jointsTextureSize.y;\n        float j = i * 16.0;\n        float x = mod(j, width);\n        float y = floor(j / width);\n        float dx = 1.0 / width;\n        float dy = 1.0 / height;\n        y = dy * (y + 0.5);\n        vec4 v1 = decodevec4(dx, x,       y);\n        vec4 v2 = decodevec4(dx, x+4.0,   y);\n        vec4 v3 = decodevec4(dx, x+8.0,   y);\n        vec4 v4 = decodevec4(dx, x+12.0,  y);\n        return mat4(v1, v2, v3, v4);\n      }\n    #endif\n  #else\n    uniform JOINT_MATRIX {\n      mat4 jointMatrices[50];\n    };\n    mat4 getBoneMatrix(const in float i) {\n      return jointMatrices[int(i)];\n    }\n  #endif\n    mat4 skinMatrix() {\n      return\n        getBoneMatrix(a_joints.x) * a_weights.x +\n        getBoneMatrix(a_joints.y) * a_weights.y +\n        getBoneMatrix(a_joints.z) * a_weights.z +\n        getBoneMatrix(a_joints.w) * a_weights.w\n        ;\n    }\n#endif\nvoid SKIN_VERTEX(inout vec4 a1) {\n  #if CC_USE_SKINNING\n    mat4 m = skinMatrix();\n    a1 = m * a1;\n  #endif\n}\nvoid SKIN_VERTEX(inout vec4 a1, inout vec4 a2) {\n  #if CC_USE_SKINNING\n    mat4 m = skinMatrix();\n    a1 = m * a1;\n    a2 = m * a2;\n  #endif\n}\nvoid SKIN_VERTEX(inout vec4 a1, inout vec4 a2, inout vec4 a3) {\n  #if CC_USE_SKINNING\n    mat4 m = skinMatrix();\n    a1 = m * a1;\n    a2 = m * a2;\n    a3 = m * a3;\n  #endif\n}\nvoid main () {\n  vec4 position = vec4(a_position, 1);\n  SKIN_VERTEX(position);\n  gl_Position = cc_shadow_map_lightViewProjMatrix * cc_matWorld * position;\n  v_depth = ((gl_Position.z + cc_shadow_map_info.x) / (cc_shadow_map_info.x + cc_shadow_map_info.y)) + cc_shadow_map_bias;\n}","frag":"\nprecision highp float;\nin float v_depth;\nvec4 packDepthToRGBA(float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 160581375.0) * depth;\n  ret = fract(ret);\n  ret -= ret.yzww * vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0, 0.0);\n  return ret;\n}\nvoid main () {\n    gl_FragColor = packDepthToRGBA(v_depth);\n}"},"glsl1":{"vert":"\nprecision highp float;\nattribute vec3 a_position;\nuniform mat4 cc_matWorld;\nuniform mat4 cc_shadow_map_lightViewProjMatrix;\nuniform vec4 cc_shadow_map_info;\nuniform float cc_shadow_map_bias;\nvarying float v_depth;\n#if CC_USE_SKINNING\n  attribute vec4 a_weights;\n  attribute vec4 a_joints;\n  #if CC_USE_JOINTS_TEXTRUE\n    uniform vec2 jointsTextureSize;\n    uniform sampler2D jointsTexture;\n    #if CC_JOINTS_TEXTURE_FLOAT32\n      mat4 getBoneMatrix(const in float i) {\n        float width = jointsTextureSize.x;\n        float height = jointsTextureSize.y;\n        float j = i * 4.0;\n        float x = mod(j, width);\n        float y = floor(j / width);\n        float dx = 1.0 / width;\n        float dy = 1.0 / height;\n        y = dy * (y + 0.5);\n        vec4 v1 = texture2D(jointsTexture, vec2(dx * (x + 0.5), y));\n        vec4 v2 = texture2D(jointsTexture, vec2(dx * (x + 1.5), y));\n        vec4 v3 = texture2D(jointsTexture, vec2(dx * (x + 2.5), y));\n        vec4 v4 = texture2D(jointsTexture, vec2(dx * (x + 3.5), y));\n        return mat4(v1, v2, v3, v4);\n      }\n    #else\n      float decode32(vec4 rgba) {\n        float Sign = 1.0 - step(128.0, rgba[0]) * 2.0;\n        float Exponent = 2.0 * mod(rgba[0], 128.0) + step(128.0, rgba[1]) - 127.0;\n        float Mantissa = mod(rgba[1], 128.0) * 65536.0 + rgba[2] * 256.0 + rgba[3] + 8388608.0;\n        return Sign * exp2(Exponent - 23.0) * Mantissa;\n      }\n      vec4 decodevec4 (vec4 x, vec4 y, vec4 z, vec4 w) {\n        return vec4(\n          decode32(x.wzyx * 255.0),\n          decode32(y.wzyx * 255.0),\n          decode32(z.wzyx * 255.0),\n          decode32(w.wzyx * 255.0)\n        );\n      }\n      vec4 decodevec4 (float dx, float x, float y) {\n        return decodevec4(\n          texture2D(jointsTexture, vec2(dx * (x + 0.5), y)),\n          texture2D(jointsTexture, vec2(dx * (x + 1.5), y)),\n          texture2D(jointsTexture, vec2(dx * (x + 2.5), y)),\n          texture2D(jointsTexture, vec2(dx * (x + 3.5), y))\n        );\n      }\n      mat4 getBoneMatrix(const in float i) {\n        float width = jointsTextureSize.x;\n        float height = jointsTextureSize.y;\n        float j = i * 16.0;\n        float x = mod(j, width);\n        float y = floor(j / width);\n        float dx = 1.0 / width;\n        float dy = 1.0 / height;\n        y = dy * (y + 0.5);\n        vec4 v1 = decodevec4(dx, x,       y);\n        vec4 v2 = decodevec4(dx, x+4.0,   y);\n        vec4 v3 = decodevec4(dx, x+8.0,   y);\n        vec4 v4 = decodevec4(dx, x+12.0,  y);\n        return mat4(v1, v2, v3, v4);\n      }\n    #endif\n  #else\n    uniform mat4 jointMatrices[50];\n    mat4 getBoneMatrix(const in float i) {\n      return jointMatrices[int(i)];\n    }\n  #endif\n    mat4 skinMatrix() {\n      return\n        getBoneMatrix(a_joints.x) * a_weights.x +\n        getBoneMatrix(a_joints.y) * a_weights.y +\n        getBoneMatrix(a_joints.z) * a_weights.z +\n        getBoneMatrix(a_joints.w) * a_weights.w\n        ;\n    }\n#endif\nvoid SKIN_VERTEX(inout vec4 a1) {\n  #if CC_USE_SKINNING\n    mat4 m = skinMatrix();\n    a1 = m * a1;\n  #endif\n}\nvoid SKIN_VERTEX(inout vec4 a1, inout vec4 a2) {\n  #if CC_USE_SKINNING\n    mat4 m = skinMatrix();\n    a1 = m * a1;\n    a2 = m * a2;\n  #endif\n}\nvoid SKIN_VERTEX(inout vec4 a1, inout vec4 a2, inout vec4 a3) {\n  #if CC_USE_SKINNING\n    mat4 m = skinMatrix();\n    a1 = m * a1;\n    a2 = m * a2;\n    a3 = m * a3;\n  #endif\n}\nvoid main () {\n  vec4 position = vec4(a_position, 1);\n  SKIN_VERTEX(position);\n  gl_Position = cc_shadow_map_lightViewProjMatrix * cc_matWorld * position;\n  v_depth = ((gl_Position.z + cc_shadow_map_info.x) / (cc_shadow_map_info.x + cc_shadow_map_info.y)) + cc_shadow_map_bias;\n}","frag":"\nprecision highp float;\nvarying float v_depth;\nvec4 packDepthToRGBA(float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 160581375.0) * depth;\n  ret = fract(ret);\n  ret -= ret.yzww * vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0, 0.0);\n  return ret;\n}\nvoid main () {\n    gl_FragColor = packDepthToRGBA(v_depth);\n}"},"builtins":{"globals":{"blocks":[{"name":"CC_SHADOW_MAP","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"CC_USE_SKINNING","type":"boolean","defines":[]},{"name":"CC_USE_JOINTS_TEXTRUE","type":"boolean","defines":["CC_USE_SKINNING"]},{"name":"CC_JOINTS_TEXTURE_FLOAT32","type":"boolean","defines":["CC_USE_SKINNING","CC_USE_JOINTS_TEXTRUE"]}],"blocks":[{"name":"SKINNING","binding":0,"members":[{"name":"jointsTextureSize","type":14,"count":1}],"defines":["CC_USE_SKINNING","CC_USE_JOINTS_TEXTRUE"]},{"name":"JOINT_MATRIX","binding":1,"members":[{"name":"jointMatrices","type":26,"count":50}],"defines":["CC_USE_SKINNING"]}],"samplers":[{"name":"jointsTexture","type":29,"count":1,"binding":30,"defines":["CC_USE_SKINNING","CC_USE_JOINTS_TEXTRUE"]}]}],[{"passes":[{"name":"phong","program":"builtin-phong|phong-vs|phong-fs","rasterizerState":{"cullMode":1029},"depthStencilState":{"depthTest":true,"depthWrite":true},"properties":{"alphaThreshold":{"type":13,"value":[0.5]},"mainTiling":{"type":14,"value":[1,1]},"mainOffset":{"type":14,"value":[0,0]},"diffuseColor":{"type":16,"value":[1,1,1,1],"editor":{"type":"color"}},"diffuseTexture":{"value":"white","type":29},"specularColor":{"type":16,"value":[1,1,1,1],"editor":{"type":"color"}},"specularTexture":{"value":"white","type":29},"emissiveColor":{"type":16,"value":[0,0,0,1],"editor":{"type":"color"}},"emissiveTexture":{"value":"white","type":29},"glossiness":{"type":13,"value":[10]},"normalTexture":{"value":"white","type":29}}},{"name":"shadowcast","stage":"shadowcast","program":"builtin-phong|shadow-map-vs|shadow-map-fs","rasterizerState":{"cullMode":1029},"depthStencilState":{"depthTest":true,"depthWrite":true}}]}]]],0,0,[],[],[]],[[{"name":"arrow","rect":[427,585,74,103],"offset":[0,0],"originalSize":[74,103],"capInsets":[0,0,0,0]}],[1],0,[0],[2],[3]],[[[14,"Ring01",[{},"0",11,[{"defines":{}},"props",11,[{},"mainTexture",6,0]]]]],0,0,[0,0],[7,4],[61,5]],[[{"name":"gate","rect":[3,852,374,377],"offset":[0,0],"originalSize":[374,377],"rotated":1,"capInsets":[0,0,0,0]}],[1],0,[0],[2],[3]],[[{"name":"new_record","rect":[3,760,288,63],"offset":[0,0],"originalSize":[288,63],"capInsets":[0,0,0,0]}],[1],0,[0],[2],[4]],[[{"name":"p2","rect":[3,429,417,418],"offset":[0.5,-0.5],"originalSize":[420,421],"rotated":1,"capInsets":[0,0,0,0]}],[1],0,[0],[2],[3]],[[{"name":"bLock_glow","rect":[386,856,497,95],"offset":[0,0],"originalSize":[497,95],"rotated":1,"capInsets":[0,0,0,0]}],[1],0,[0],[2],[3]],[[[205,"GamePlay",null],[136,"nextSongItem",false,[-10,-11,-12,-13,-14,-15],[[20,0,-2,[211]],[88,40,610,-3],[112,-9,-8,-7,-6,-5,-4]],[59,-1],[5,880,190],[0,-100,0,0,0,0,1,1,1,1]],[137,"UI",1,[-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42],[[171,false,0,false,-16,[295],296],[26,45,640,960,-17]],[4,4278190080],[5,1080,1920]],[31,"BGLoading",2,[-46,-47,-48,-49,-50,-51],[[107,0,false,-44,[115],116],[22,2,45,1080,1920,-45]],[1,"5eo0IDbERERL1G6ka28Bmv",-43],[5,1800,3200],[0,0,0,0,0,0,1,0.6,0.6,0.6]],[56,"Endgame",false,2,[-71,-72,-73,-74,-75,-76,-77,-78,-79],[[16,1,0,-52,[224],225],[26,45,350,250,-53],[206,-69,-68,-67,-66,-65,-64,-63,-62,-61,-60,-59,-58,-57,-56,-55,-54,226],[120,true,-70,227]],[5,1080,1920]],[138,"GameControler",512,"6do/Ur5E9JoJ1OHtgVwwI4",[[208,-81,-80],[209,-118,-117,-116,-115,-114,-113,-112,-111,-110,-109,-108,-107,-106,-105,-104,-103,-102,-101,-100,3,-99,-98,-97,-96,-95,-94,4,-93,-92,-91,-90,-89,-88,-87,-86,-85,-84,-83,-82,32,33,34,35,36],[120,true,-119,281],[210,-142,-141,-140,-139,-138,-137,-136,-135,-134,-133,-132,-131,-130,-129,-128,-127,-126,-125,-124,-123,-122,-121,-120],[211,-150,-149,-148,-147,-146,-145,-144,-143,282,283]]],[56,"ContinuePlay",false,2,[-158,-159,-160,-161,-162],[[172,false,0,-151,[248],249],[26,45,350,250,-152],[212,-157,-156,-155,4,-154,-153]],[5,1080,1920]],[162,"Game",512,true,"85VJB67X5PmLBbZJUeg+a3",[[-163,-164,[71,"Balls",true,-165],-166,-167,-168,-169,-170,-171,-172,-173],1,1,4,1,1,1,1,1,1,1,1]],[9,"Tip",2,[-175,-176,-177,-178,-179,-180,-181],[[89,44,224.50099999999998,-174]],[5,1080,0],[0,-735.499,0,0,0,0,1,1,1,1]],[139,"ProgressBar",2,[-184,-185,-186,-187,-188],[[90,9,68.053,340.25499999999994,-182],[213,-183,[4,4294967295],[4,4294967295],[4,4283103743]]],[5,8,450],[0,0.5,0],[-467.947,169.74500000000012,0,0,0,0,1,1,1,1]],[97,"nova_blue_2",true,[-197,-198,-199],[[121,1,1,false,false,2,2,-196,[70],[0],[4,2],[35],[4,8],[0],[0],[0],[0],[0],[[53,1,1,[4,1]]],[29,true,[11,1,[30,[[123,0.7068181818181819],[3,0.8522727272727273,[4,4294639360]],[3,1,[4,4294918656]]],[[24,255],[7,255,0.7068181818181818],[7,0,1]]]]],[124,true,true,[52,2],[17,1,4,[45,[-194,-195]]],[17,1,8,[45,[-192,-193]]],[17,1,4,[45,[-190,-191]]]]]],[1,"f0pp1TGo9JmrMMyZiP5LM6",-189],[0,-0.2,-0.2,0,0,0,1,1,1,1]],[140,"SkyBox",true,[-200,-201,-202,-203,-204,-205],[0,7,-10.609,-6.400522398026175e-18,0.9945218953682733,0.10452846326765347,6.089690279223575e-17,1,1,1],[1,-12,180,0]],[25,"UnlockLevel",false,4,[-207,-208,-209,-210,-211],[[89,40,1555.837,-206]],[5,1080,0],[0,584.677,0,0,0,0,1,1,1,1]],[141,"gate",true,7,[-213,-214,-215,-216],[[108,768,769,0,-212,[46],47]],[4,4294378230],[5,40,40],[-480,0,54050.64166666666,0,0,0,1,1,1,1]],[142,"mesh",true,[-217,-218,-219,-220,-221,10],[0,1.6,0,0,0,0,1,3.2,3.2,3.2]],[9,"ScorePanel",4,[-223,-224,-225,-226],[[33,40,-222]],[5,1080,0],[0,-616.717,0,0,0,0,1,1,1,1]],[31,"BtnUnlockAds",1,[-229,-230,-231],[[38,36,-6.007999999999981,22.166,-227],[10,-228,[[6,"1802do5XcZCN6HXEbNjpat0","playSong",1]]]],[1,"a1vQ/23T9J66dnmO8tK7tp",1],[5,280,110],[306.008,-17.834000000000003,0,0,0,0,1,1,1,1]],[70,"BtnUnlock",false,1,[-234,-235,-236],[[38,36,-4.004000000000019,21.058999999999997,-232],[10,-233,[[6,"1802do5XcZCN6HXEbNjpat0","playSong",1]]]],[1,"fbJXyqEwxJTpKDy9Nx/omH",1],[5,280,110],[304.004,-18.941000000000003,0,0,0,0,1,1,1,1]],[9,"BtnGold",6,[-238,-239,-240,-241],[[10,-237,[[6,"7ed3ekwh35APKZxYa5fG4AB","continueGold",6]]]],[5,700,180],[0,-293.687,0,0,0,0,1,1,1,1]],[25,"TryPlayTip",false,2,[-243,-244,-245,-246],[[33,45,-242]],[5,647.9987040025919,1151.9976960046079],[0,0,0,0,0,0,1,1.66667,1.66667,1.66667]],[222,"New Node",false,[-247,-248,7,-249,5],[0,0,0],[0,0,0,0,0,0,1,1,1,1]],[70,"WarningConnect",false,3,[-251,-252,-253],[[33,40,-250]],[1,"0b91klgklAiLCwrUGicTyz",3],[5,1079.9978400043199,0],[0,15.9,0,0,0,0,1,1.66667,1.66667,1.66667]],[143,"LayoutRevive",false,2,[-256,-257],[[16,1,0,-254,[131],132],[125,-255,[5,350,250]]],[4,4283256141],[5,350,250]],[72,"Stars",4,[-259,-260,-261],[[41,1,363.58299999999997,-258]],[0,596.417,0,0,0,0,1,1,1,1]],[72,"StarsActive",4,[-263,-264,-265],[[41,1,358.24800000000005,-262]],[0,601.752,0,0,0,0,1,1,1,1]],[9,"Songs",4,[-267,-268,-269],[[180,40,100,100,-266]],[5,880,0],[0,-200,0,0,0,0,1,1,1,1]],[31,"BtnPlay",1,[-272,-273],[[38,36,-6.007999999999981,21.650000000000006,-270],[10,-271,[[6,"1802do5XcZCN6HXEbNjpat0","playSong",1]]]],[1,"38oESb645KbKSzb+Pi/qeJ",1],[5,280,110],[306.008,-18.349999999999994,0,0,0,0,1,1,1,1]],[144,"BtnShare",false,true,6,[-275,-276,-277],[[10,-274,[[6,"7ed3ekwh35APKZxYa5fG4AB","continueShare",6]]]],[5,700,180],[0,-293.687,0,0,0,0,1,1,1,1]],[56,"Tutorial",false,2,[-279,-280,-281],[[33,45,-278]],[5,1080,1920]],[9,"bg_tutorial",28,[-284,-285,-286],[[2,0,-282,[255],256],[181,211.5,211.5,366.5,566.5,657,987,-283]],[5,750,1200],[0,100,0,0,0,0,1,1,1,1]],[99,"VideoNotAvailable",false,245,2,[-289,-290],[[2,0,-287,[273],274],[26,45,40,36,-288]],[4,4278190080],[5,1080,1920]],[145,"Canvas",512,1,"4dQtnIGrpAspYKNl/HNDH9",20,[-293,2],[[223,-291,[5,1080,1920]],[33,45,-292]],[5,1080,1920],[540,960,0,0,0,0,1,1,1,1]],[146,"WinGame",false,2,[[173,1,0,-294,[16]],[125,-295,[5,1090,1930]],[182,45,-5,-5,-5,-5,200,150,-296]],[4,4278190080],[5,1090,1930]],[25,"BtReset",false,2,[-300],[[42,1,-298,[[6,"5fe8dcD2T1GlorW7CX1QlDa","resetRound",5]],[4,4293322470],[4,4291348680],[4,3363338360],-297,284,285,286,287],[90,9,71.535,20.999000000000024,-299]],[5,100,40],[-198.465,439.001,0,0,0,0,1,1,1,1]],[47,"Background",33,[-303],[[16,1,0,-301,[30],31],[22,0,45,100,40,-302]],[4,4293322470],[5,100,40]],[147,"ImpactFX",true,14,[-304,-305,-306]],[25,"BtResetMid",false,2,[-310],[[42,1,-308,[[6,"5fe8dcD2T1GlorW7CX1QlDa","resetRound",5]],[4,4293322470],[4,4291348680],[4,3363338360],-307,74,75,76,77],[183,20,17.534999999999968,20.999000000000024,218.651,-309]],[5,100,40],[0,-241.349,0,0,0,0,1,1,1,1]],[47,"Background",36,[-313],[[16,1,0,-311,[72],73],[22,0,45,100,40,-312]],[4,4293322470],[5,100,40]],[56,"BtStart",false,2,[-317],[[42,1,-315,[[6,"5fe8dcD2T1GlorW7CX1QlDa","startRound",5]],[4,4293322470],[4,4291348680],[4,3363338360],-314,81,82,83,84],[90,9,260,450,-316]],[5,100,40]],[47,"Background",38,[-320],[[16,1,0,-318,[79],80],[22,0,45,100,40,-319]],[4,4293322470],[5,100,40]],[25,"BtNextSong",false,2,[-324],[[113,1,-322,[[6,"5fe8dcD2T1GlorW7CX1QlDa","nextSong",5]],[4,4293322470],[4,4291348680],[4,3363338360],-321,88,89,90,91,92],[61,33,496.09299999999996,6.34499999999997,123.97300000000001,-323]],[5,100,40],[263.65500000000003,336.027,0,0,0,0,1,1,1,1]],[47,"Background",40,[-327],[[16,1,0,-325,[86],87],[22,0,45,100,40,-326]],[4,4293322470],[5,100,40]],[25,"BtNextLevel",false,2,[-331],[[113,1,-329,[[6,"5fe8dcD2T1GlorW7CX1QlDa","nextLevel",5]],[4,4293322470],[4,4291348680],[4,3363338360],-328,96,97,98,99,100],[61,33,496.09299999999996,6.828000000000031,172.873,-330]],[5,150,40],[458.172,767.127,0,0,0,0,1,1,1,1]],[47,"Background",42,[-334],[[16,1,0,-332,[94],95],[22,0,45,100,40,-333]],[4,4293322470],[5,150,40]],[73,"Background",[-337],[[16,1,0,-335,[118],119],[22,0,45,100,40,-336]],[4,4293322470],[5,200,40]],[73,"Background",[-340],[[16,1,0,-338,[125],126],[22,0,45,100,40,-339]],[4,4293322470],[5,200,40]],[9,"NewRecord",15,[-343],[[27,1,265,265,-1011.298,550,-341],[2,0,-342,[175],176]],[5,550,90],[0,966.298,0,0,0,0,1,1,1,1]],[25,"playWithFrields",false,4,[-345,-346,-347],[[10,-344,[[6,"55e10JnsbNBH6eAX9QKGjOR","playWithFriend",4]]]],[5,800,200],[0,-380.058,0,0,0,0,1,1,1,1]],[9,"Footer",4,[-349,-350,-351],[[41,1,1721.005,-348]],[5,178.13,40],[0,-781.0050000000001,0,0,0,0,1,1,1,1]],[100,"BtnReplay",48,[-354],[[2,0,-352,[214],215],[10,-353,[[6,"55e10JnsbNBH6eAX9QKGjOR","replayGame",4]]]],[5,263,297]],[9,"BtnHome",48,[-357],[[2,0,-355,[218],219],[10,-356,[[6,"55e10JnsbNBH6eAX9QKGjOR","gotoHome",4]]]],[5,200,215],[-310,0,0,0,0,0,1,1,1,1]],[9,"BtnShare",48,[-360],[[2,0,-358,[222],223],[10,-359,[[6,"55e10JnsbNBH6eAX9QKGjOR","shareGame",4]]]],[5,200,215],[310,0,0,0,0,0,1,1,1,1]],[9,"NoThanks",6,[-362,-363],[[10,-361,[[6,"7ed3ekwh35APKZxYa5fG4AB","showEndGame",6]]]],[5,300,120],[0,-514.837,0,0,0,0,1,1,1,1]],[9,"btn_bg_0",28,[-367],[[81,-364,[258],259],[184,16,312.5,352.852,-365],[10,-366,[[6,"5fe8dcD2T1GlorW7CX1QlDa","closeNodeTutorial",5]]]],[5,455,135],[0,-608.84,0,0,0,0,1,1,1,1]],[99,"LoadingAds",false,180,2,[-370],[[2,0,-368,[277],278],[26,45,40,36,-369]],[4,4278190080],[5,1080,1920]],[73,"Background",[-373],[[16,1,0,-371,[289],290],[22,0,45,100,40,-372]],[4,4293322470],[5,100,40]],[32,"LbMid",0,2,[[115,"+20",110,50,false,1,1,1,-374,[18],19],[185,18,179.627,200,697,-5.954,63,-375]],[5,125.28,50],[0,-5.954,0,0,0,0,1,1,1,1]],[32,"LbCombo",0,2,[[115,"+20",110,50,false,1,1,1,-376,[20],21],[186,17,323.12300000000005,668.5,255,63,-377]],[5,125.28,50],[0,611.877,0,0,0,0,1,1,1,1]],[72,"Coin",2,[-379,-380],[[61,9,72.41699999999997,166.62400000000002,72.97400000000005,-378]],[-467.583,887.026,0,0,0,0,1,1,1,1]],[8,"CoinText",58,[[116,"0",110,false,1,1,-381,[24],25],[39,8,52.19499999999999,-382]],[5,200,60],[152.195,-1.134,0,0,0,0,1,1,1,1]],[48,"trail",true,7,[[111,-383,[37]],[224,-384]],[0,1.2,-7.755,0,0,0,1,1,1,1]],[148,"Other",3,[-385,-386,-387],[1,"e0M/jzSoZNpLPruLvFZhH+",3],[0,-603.752,0,0,0,0,1,1.4,1.4,1]],[8,"SongName",4,[[195,"UNITY THE FATRAT ",100,100,false,1,1,1,-388,[150],151],[27,41,50,50,44.83299999999997,1570.25,-389]],[5,980,200],[0,815.167,0,0,0,0,1,1,1,1]],[74,"Score",15,[[43,"50",150,false,1,1,-390,[170],171],[41,1,-1125.204,-391]],[4,4294115072],[5,118.75,40],[0,1105.204,0,0,0,0,1,1,1,1]],[8,"BestScore",15,[[117,"Best Score : 200",78,false,1,1,1,-392,[172],173],[27,41,50,50,-1005.964,356.25,-393]],[5,980,80],[0,965.964,0,0,0,0,1,1,1,1]],[9,"Gold",15,[-395,-396],[[41,1,-842.937,-394]],[5,178.13,40],[-34.387,822.937,0,0,0,0,1,1,1,1]],[100,"SongLists",25,[1],[[33,40,-397]],[5,880,0]],[31,"playIcon",1,[-400],[[2,0,-398,[191],192],[39,8,-24,-399]],[1,"dal2QZyWFB04DfrC64uAIq",1],[5,115,115],[-406.5,-7.03,0,0,0,0,1,1,1,1]],[98,"title",1,[[91,"Nắng Ấm Xa Dần Nắng Ấm Xa Dần",80,55,false,1,2,-401,[193],194],[40,40,143.22000000000003,296.78,377.78,-402]],[1,"4e/JvP+95IPo7imOU1CyyJ",1],[5,440,140],[0,0,0.5],[-296.78,-10.478,0,0,0,0,1,1,1,1]],[149,"SecondChance",6,[-403,-404,-405],[0,286.174,0,0,0,0,1,1,1,1]],[9,"btn_bg_0",19,[-408],[[2,0,-406,[266],267],[10,-407,[[6,"5fe8dcD2T1GlorW7CX1QlDa","closeTryPlayTip",5]]]],[5,120,50],[0,-108.155,0,0,0,0,1,1,1,1]],[8,"closeBtn",30,[[2,0,-409,[270],271],[187,18,-148.749,-410],[194,true,-411,[[6,"5fe8dcD2T1GlorW7CX1QlDa","closeVideoNotAvailable",5]],272]],[5,100,110],[0,-148.749,0,0,0,0,1,1,1,1]],[18,"loading",54,[[174,0,2,0.5,-412,[275],276],[33,18,-413],[225,200,-414]],[5,80,80]],[25,"BtShowSongList",false,2,[55],[[42,1,-415,[[6,"5fe8dcD2T1GlorW7CX1QlDa","updateDataRoad",5]],[4,4293322470],[4,4291348680],[4,3363338360],55,291,292,293,294],[188,33,496.09299999999996,6.345000000000027,207.23799999999997,712.7620000000001,40,-416]],[5,100,40],[263.655,252.76200000000006,0,0,0,0,1,1,1,1]],[150,"Back",true,2,"2d9rNazEJC+aSE933JwC8X",20,[11,-417],[5,640,960]],[151,"Background Camera",true,2,[[226,4,7,91.6,4000,false,false,-418]],[0,0,0,-1.584809575715882e-17,0.9659258262890683,0.2588190451025207,5.914589856893349e-17,1,1,1],[1,-29.999999999999993,180,0]],[37,"LbCount",2,[[-419,[41,17,113.91499999999994,-420]],1,4],[5,0,50],[0,821.085,0,0,0,0,1,1,1,1]],[8,"Icon",58,[[2,0,-421,[22],23]],[5,70,70],[2.212,0,0,0,0,0,1,1,1,1]],[78,"LbNameSong",false,2,[[-422,[61,9,19.767999999999972,59.90300000000002,19.14300000000003,-423]],1,4],[5,71.25,50.4],[0,0,0.5],[-300.232,435.657,0,0,0,0,1,1,1,1]],[78,"LbTime",false,2,[[-424,[189,12,10,59.523000000000025,9.228999999999985,10,-425]],1,4],[5,19.26,50.4],[0,0,0.5],[-310,-444.8,0,0,0,0,1,1,1,1]],[78,"LbGameTime",false,2,[[-426,[190,33,42.839,75.21800000000002,-427]],1,4],[5,11.12,50.4],[0,1,0.5],[267.161,369.582,0,0,0,0,1,1,1,1]],[48,"Confetti",true,13,[[63,200,false,false,0,6,4,-428,[38],[0],[5,3,10,8],[11,4,[30,[[13,[4,4282466815]],[13,[4,4282466815]],[3,0.16363636363636364,[4,4282466815]],[3,0.17954545454545456,[4,4282176767]],[3,0.36818181818181817,[4,4282176767]],[3,0.375,[4,4281794378]],[3,0.5590909090909091,[4,4281204545]],[3,0.5681818181818181,[4,4294924263]],[3,0.8159090909090909,[4,4294924259]],[3,0.8250000000000001,[4,4294945850]]],[[24,255]]]],[4,1],[5,3,8,12],[5,3,30,-30],[0],[0],[0],[[54,100,150,100,[4,150]]],[64,true,0.5,0.7853981633974483,[0],[1,180,0,0]],[46,true,[5,3,3,-3],[5,3,-3,3],[5,3,3,-3]],39]],[-10,0,-50,0,0,0,1,1,1,1]],[101,"33",false,true,7,[-429],[5,35,35]],[101,"66",false,true,7,[-430],[5,35,35]],[75,"endless1",true,7,[-431],[5,35,35]],[75,"endless2",true,7,[-432],[5,35,35]],[102,"Game camera",true,7,[[227,-7,0,1,30,0.1,2000,false,3,false,-433]],[0,15,-80,-3.738144926699155e-18,0.9981347984218669,0.06104853953485687,6.111812930024639e-17,1,1,1],[1,-7,180,8.827812596100317e-32]],[75,"Player",true,7,[14],[5,100,100]],[65,2,2],[94,1,1],[65,2,2],[94,1,1],[58,"LbNode",3,[[-434,[89,4,189.21260000000007,-435]],1,4],[1,"3eitNpstJKiJHGClGiY0zv",3],[5,556.56,40],[0,-1377.454,0,0,0,0,1,1.66667,1.66667,1.66667]],[58,"Tut1",3,[[-436,[27,41,-1123.4716666666668,-1123.4716666666668,141.3599999999999,1048.61,-437]],1,4],[1,"497y/35G5N7Kf4jejnU9x/",3],[5,4046.9433333333336,250],[0,1333.64,0,0,0,0,1,1,1,1]],[163,"Tut2",3,[[-438,[27,41,-1011.6666666666667,-1011.6666666666667,415.1410000000001,916.67,-439]],1,4],[1,"dfpGYmelFKDrl7Aut7k5vp",3],[4,4294115072],[5,3823.3333333333335,120],[0,1124.859,0,0,0,0,1,1,1,1]],[58,"Tut3",3,[[-440,[191,44,-1082.5016666666668,-1082.5016666666668,792.318,525.4629999999999,1031.11,-441]],1,4],[1,"a43gPlKmFKeocLiT/4Fo+/",3],[5,3965.0033333333336,180],[0,-984.5370000000003,0,0,0,0,1,1,1,1]],[152,"bg",224,21,[[2,0,-442,[111],112],[40,40,100,100,850,-443]],[1,"51LOeqKdpCQIjgXDgdvIDw",3],[4,4278190080],[5,850,460]],[58,"Description",21,[[-444,[40,40,139.99892000215993,139.99892000215993,2920,-445]],1,4],[1,"3dHjbmtGFMl7CQJelvSd8C",3],[5,800,280],[0,-54.755,0,0,0,0,1,1,1,1]],[9,"BtResetMid",22,[44],[[42,1,-446,[[6,"5fe8dcD2T1GlorW7CX1QlDa","resetRound",5]],[4,4293322470],[4,4291348680],[4,3363338360],44,120,121,122,123]],[5,200,40],[0,-50,0,0,0,0,1,1,1,1]],[9,"BtReviveMid",22,[45],[[42,1,-447,[[6,"5fe8dcD2T1GlorW7CX1QlDa","reviveRound",5]],[4,4293322470],[4,4291348680],[4,3363338360],45,127,128,129,130]],[5,200,40],[0,50,0,0,0,0,1,1,1,1]],[37,"text",8,[[-448,[192,40,50,50,-17.221999999999998,590.27,-449]],1,4],[5,980,140],[0,-42.552,0,0,0,0,1,1,1,1]],[153,"ConfettiEffect",true,4,[-451],[[122,true,0,4,4,-450,[148],[0],[4,28],[11,4,[30,[[13,[4,4282466815]],[13,[4,4282466815]],[3,0.16363636363636364,[4,4282466815]],[3,0.17954545454545456,[4,4282176767]],[3,0.36818181818181817,[4,4282176767]],[3,0.375,[4,4281794378]],[3,0.5590909090909091,[4,4281204545]],[3,0.5681818181818181,[4,4294924263]],[3,0.8159090909090909,[4,4294924259]],[3,0.8250000000000001,[4,4294945850]]],[[24,255],[7,255,1]]]],[4,30],[5,3,30,20],[5,3,30,-30],[4,0.3],[4,3],[0],[126,true,0.5,0.1,[0],[1,-120,0,0],[1,1200,100,300]],[29,true,[11,1,[44,[[7,255,0.35454545454545455],[7,0,1]]]]],[46,true,[5,3,3,-3],[5,3,-3,3],[5,3,3,-3]],149]],[33.038,1180.402,37.87,0,0,0,1,1,1,1]],[79,"Desc",12,[[-452,[40,40,50,50,1245.89,-453]],1,4],[4,4294899712],[5,980,140],[0,-301.217,0,0,0,0,1,1,1,1]],[8,"Value",65,[[91,"0",130,80,false,1,1,-454,[179],180]],[5,200,80],[168.274,0,0,0,0,0,1,1,1,1]],[164,"title",25,[[-455,[88,40,377.78,-456]],1,4],[4,4294115072],[5,880,60],[0,0,0.5],[-440,79.694,0,0,0,0,1,1,1,1]],[12,"text",17,[[23,"200",55,false,1,1,-457,[208]]],[1,"5c+x8bAJpN65PwHEPP++RO",1],[5,91.77,50.4],[27.239,0,0,0,0,0,1,1,1,1]],[76,"bg",232,6,[[2,0,-458,[228],229],[26,45,40,36,-459]],[4,4282532418],[5,1080,1920]],[37,"Continue",18,[[-460,[39,8,209.911,-461]],1,4],[5,450,110],[84.911,0,0,0,0,0,1,1,1,1]],[74,"ShareLabel",27,[[116,"Faebook Share",60,false,1,2,-462,[242],243],[39,8,189.233,-463]],[4,4294115072],[5,450,50],[64.233,-47.571,0,0,0,0,1,1,1,1]],[37,"Continue",27,[[-464,[39,8,182.334,-465]],1,4],[5,500,120],[82.334,17.764,0,0,0,0,1,1,1,1]],[76,"bg_black",210,28,[[2,0,-466,[250],251],[26,45,2,2,-467]],[4,4278190080],[5,1080,1920]],[37,"Tut1",29,[[-468,[27,41,15,15,16.414999999999992,1048.61,-469]],1,4],[5,720,130],[0,518.585,0,0,0,0,1,1,1,1]],[79,"Tut2",29,[[-470,[27,41,14.999999999999972,14.999999999999972,148.68699999999998,916.67,-471]],1,4],[4,4294115072],[5,720,90],[0,406.313,0,0,0,0,1,1,1,1]],[79,"Tut3",29,[[-472,[27,41,15,15,202.99099999999999,916.67,-473]],1,4],[4,4278250495],[5,720,90],[0,352.009,0,0,0,0,1,1,1,1]],[76,"bg",222,19,[[2,0,-474,[260],261],[26,45,850,260,-475]],[4,4278190080],[5,647.9987040025919,1151.9976960046079]],[37,"Description",19,[[-476,[40,40,123.99935200129596,123.99935200129596,2920,-477]],1,4],[5,400,80],[0,31.432,0,0,0,0,1,1,1,1]],[8,"Desc",30,[[117,"Sorry the video is not available",70,false,1,1,1,-478,[268],269],[193,42,50,50,42.896,542.5,-479]],[5,980,80],[0,42.896,0,0,0,0,1,1,1,1]],[165,"GoldEffect",false,2,[-481],[-480],[0,-286.026,0,0,0,0,1,1,1,1]],[50,"Front",true,2,11,[-482],[4,4291611852],[5,1024,1024],[0,0,-512,0,1,0,6.123233995736766e-17,1,1,1],[1,0,180,0]],[20,0,118,[0]],[166,"Back",true,2,11,[-483],[4,4291611852],[5,1024,1024],[0,0,512,0,0,0,1,1,1,1]],[20,0,120,[1]],[50,"Top",true,2,11,[-484],[4,4291611852],[5,1024,1024],[0,512,0,0.7071067811865475,0,0,0.7071067811865477,1,1,1],[1,89.99999999999999,0,0]],[20,0,122,[2]],[50,"Down",true,2,11,[-485],[4,4291611852],[5,1024,1024],[0,-512,0,-0.7071067811865475,0,0,0.7071067811865477,1,1,1],[1,-89.99999999999999,0,0]],[20,0,124,[3]],[50,"Left",true,2,11,[-486],[4,4291611852],[5,1024,1024],[-512,0,0,0,-0.7071067811865475,0,0.7071067811865477,1,1,1],[1,0,-89.99999999999999,0]],[20,0,126,[4]],[50,"Right",true,2,11,[-487],[4,4291611852],[5,1024,1024],[512,0,0,0,0.7071067811865475,0,0.7071067811865477,1,1,1],[1,0,89.99999999999999,0]],[20,0,128,[5]],[154,"NodeCam",512,true,74,[75],[0,0,-256,0,0,0,1,1,1,1]],[155,"Main Camera",31,[[228,2,0,2,3,-488]],[0,0,412.2280922013928,0,0,0,1,1,1,1]],[103,"BG",9,[[109,"BG<Sprite>",1,0,-489,[6],7]],[5,8,450],[0,0.5,0]],[103,"FG",9,[[109,"FG<Sprite>",1,0,-490,[8],9]],[5,8,0],[0,0.5,0]],[8,"Circle33",9,[[51,"Circle33<Sprite>",0,-491,[10],11]],[5,95,105],[0,148.5,0,0,0,0,1,1,1,1]],[8,"Circle66",9,[[51,"Circle66<Sprite>",0,-492,[12],13]],[5,95,105],[0,297,0,0,0,0,1,1,1,1]],[8,"Circle100",9,[[51,"Circle100<Sprite>",0,-493,[14],15]],[5,95,105],[0,450,0,0,0,0,1,1,1,1]],[196,190,50,false,1,1,1,76,[17]],[118,"Name",30,false,1,1,78,[26]],[118,"0s",20,false,2,1,79,[27]],[197,"0",20,1,1,1,80,[28]],[19,"Label",34,[[28,"Reset",20,false,1,1,1,-494,[29]]],[4,4278190080],[5,100,40]],[71,"Roads",true,7],[71,"Obs",true,7],[48,"Confetti copy",true,13,[[63,200,false,false,0,6,4,-495,[40],[0],[5,3,10,8],[11,4,[30,[[13,[4,4282466815]],[13,[4,4282466815]],[3,0.16363636363636364,[4,4282466815]],[3,0.17954545454545456,[4,4282176767]],[3,0.36818181818181817,[4,4282176767]],[3,0.375,[4,4281794378]],[3,0.5590909090909091,[4,4281204545]],[3,0.5681818181818181,[4,4294924263]],[3,0.8159090909090909,[4,4294924259]],[3,0.8250000000000001,[4,4294945850]]],[[24,255]]]],[4,1],[5,3,8,12],[5,3,30,-30],[0],[0],[0],[[54,100,150,100,[4,150]]],[64,true,0.5,0.7853981633974483,[0],[1,180,0,0]],[46,true,[5,3,3,-3],[5,3,-3,3],[5,3,3,-3]],41]],[-10,0,90,0,0,0,1,1,1,1]],[48,"Confetti1",true,13,[[63,200,false,false,0,6,4,-496,[42],[0],[5,3,10,8],[11,4,[30,[[13,[4,4282466815]],[13,[4,4282466815]],[3,0.16363636363636364,[4,4282466815]],[3,0.17954545454545456,[4,4282176767]],[3,0.36818181818181817,[4,4282176767]],[3,0.375,[4,4281794378]],[3,0.5590909090909091,[4,4281204545]],[3,0.5681818181818181,[4,4294924263]],[3,0.8159090909090909,[4,4294924259]],[3,0.8250000000000001,[4,4294945850]]],[[24,255]]]],[4,1],[5,3,8,12],[5,3,30,-30],[0],[0],[0],[[54,100,150,100,[4,150]]],[64,true,0.1,0.7853981633974483,[0],[1,180,0,0]],[46,true,[5,3,3,-3],[5,3,-3,3],[5,3,3,-3]],43]],[10,0,-50,0,0,0,1,1,1,1]],[48,"Confetti1 copy",true,13,[[63,200,false,false,0,6,4,-497,[44],[0],[5,3,10,8],[11,4,[30,[[13,[4,4282466815]],[13,[4,4282466815]],[3,0.16363636363636364,[4,4282466815]],[3,0.17954545454545456,[4,4282176767]],[3,0.36818181818181817,[4,4282176767]],[3,0.375,[4,4281794378]],[3,0.5590909090909091,[4,4281204545]],[3,0.5681818181818181,[4,4294924263]],[3,0.8159090909090909,[4,4294924259]],[3,0.8250000000000001,[4,4294945850]]],[[24,255]]]],[4,1],[5,3,8,12],[5,3,30,-30],[0],[0],[0],[[54,100,100,150,[4,150]]],[64,true,0.1,0.7853981633974483,[0],[1,180,0,0]],[46,true,[5,3,3,-3],[5,3,-3,3],[5,3,3,-3]],45]],[10,0,90,0,0,0,1,1,1,1]],[49,"font",true,82,[[62,"33%",110,false,-498,[48],49]],[5,143.61,40],[0,4,0,0,1,0,6.123233995736766e-17,0.08,0.08,0.08],[1,0,180,0]],[49,"font",true,83,[[62,"66%",110,false,-499,[50],51]],[5,149.72,40],[0,4,0,0,1,0,6.123233995736766e-17,0.08,0.08,0.08],[1,0,180,0]],[49,"font",true,84,[[62,"ENDLESS 1",110,false,-500,[52],53]],[5,349.86,40],[0,4,0,0,1,0,6.123233995736766e-17,0.08,0.08,0.08],[1,0,180,0]],[49,"font",true,85,[[62,"ENDLESS 2",110,false,-501,[54],55]],[5,368.19,40],[0,4,0,0,1,0,6.123233995736766e-17,0.08,0.08,0.08],[1,0,180,0]],[156,"shadow",100,true,14,[[108,771,769,0,-502,[56],57]],[4,4280229832],[5,1.4,0.9],[0,-0.75,0,0,0,0,1,1,1,1]],[157,"ball",true,14,[[2,0,-503,[58],59]],[4,4280032436],[5,1,1]],[102,"ballMesh",true,14,[[179,-504,[60],61]],[0,0,-0.1,-0.5,0.5,0.4999999999999999,0.5000000000000001,1,1,1],[1,-90,90,0]],[57,"Ring",true,35,[[214,1,1,false,false,1.5,-505,[62],[0],[4,0.35],[35],[4,1.2],[0],[0],[0],[0],[0],[[53,1,1,[4,1]]],[29,true,[11,1,[44,[[7,255,0.5454545454545454],[7,0,1]]]]],[93,true,[17,1,6,[55,[[65,2,2],[94,1,1]]]],[0],[0],[0]]]]],[57,"FbF",true,35,[[215,0.35,1,false,false,-506,[63],[0],[4,0.35],[35],[4,20],[0],[0],[0],[0],[0],[[53,1,1,[4,1]]],[235,true,6,4,0.035,[17,1,24,[55,[[65,1,1],[66,1,1,1,1]]]],[4,1]]]]],[57,"LensFlare",true,35,[[216,1,1,false,false,-507,[64],[4,0.1],[4,0.35],[35],[4,20],[0],[0],[0],[0],[0],[[220,1,1,0,10,[4,1]]],[29,true,[11,1,[44,[[7,255,0.7568181818181818],[7,0,1]]]]]]]],[49,"light",true,14,[[60,1,0,-508,[65],66]],[5,1,1],[-0.21,0.146,-0.081,0,0,-0.08715574274765817,0.9961946980917455,1,1,1],[1,0,0,-10]],[77,"nova_blue",true,10,[[121,1,1,false,false,2,2,-509,[67],[4,0.3],[4,1.4],[35],[4,8],[0],[0],[0],[0],[0],[[53,1,1,[4,1]]],[29,true,[11,1,[44,[[24,0],[7,255,0.15909090909090903],[7,255,0.4681818181818182],[7,0,1]]]]],[124,true,true,[52,2],[17,1,4,[45,[88,89]]],[17,1,8,[45,[88,89]]],[17,1,4,[45,[88,89]]]]]],[1,"a4gdyN0KFOv6zwccE5zKrL",10]],[77,"LensFlare",true,10,[[217,1,1,false,1.5,-510,[68],[0],[4,0.5],[35],[4,4],[0],[4,1.571],[0],[0],[0],[[53,1,1,[4,1]]],[29,true,[11,1,[30,[[123,0.3068181818181818],[3,0.565909090909091,[4,4294311680]],[3,0.7749999999999999,[4,4294930432]]],[[24,0],[7,255,0.15681818181818177],[7,255,0.7022727272727273],[7,0,1]]]]],[93,true,[17,1,8,[55,[[230],[66,1,1,2,2]]]],[52,4],[52,8],[52,4]]]],[1,"07kzlR4ztLo6FNxoUmGTRR",10]],[77,"particle",true,10,[[218,1,300,false,false,2,0,-511,[69],[0],[5,3,1,2],[35],[5,3,0.25,0.5],[5,3,8,14.6],[0],[0],[0],[0],[[54,50,80,10,[4,80]]],[229,true,3,0.1,2,1,[4,1]],[29,true,[11,1,[44,[[7,0,0.12727272727272726],[7,255,0.19318181818181818],[7,255,0.8522727272727273],[221,1]]]]],[93,true,[17,1,1.5,[55,[[231,0.31,0.02],[66,0.18,0.68,4.21,4.21],[66,0.24,1,0.03,0.03],[232,1,-3.67]]]],[0],[0],[0]],[236,true,0.95,[219,1,[55,[[233,1,-2],[234,1,0.01,-2.33]]]],[0],[0],[0]]]],[1,"09SvmLlfxKy5V9w0ALV7jq",10]],[19,"Label",37,[[28,"Reset",20,false,1,1,1,-512,[71]]],[4,4278190080],[5,100,40]],[19,"Label",39,[[28,"Start",20,false,1,1,1,-513,[78]]],[4,4278190080],[5,100,40]],[19,"Label",41,[[28,"Next Song",20,false,1,1,1,-514,[85]]],[4,4278190080],[5,100,40]],[19,"Label",43,[[28,"Next Level (0)",20,false,1,1,1,-515,[93]]],[4,4278190080],[5,150,40]],[198,"Downloading data... Please wait!",55,false,1,1,1,1,92,[101]],[92,"Roll to the ball",250,false,1,1,2,93,[102]],[92,"Which has the same color!\n",120,false,1,1,2,94,[103]],[34,"Hold & Drag to control",150,100,false,1,1,1,95,[104]],[12,"loading_hand",61,[[81,-516,[105],106]],[1,"600QMkGDRBV4TJJ/PX8vaD",3],[5,138,234],[16.096,-60.571,0,0,0,0,1,1,1,1]],[12,"loading_arrow",61,[[2,0,-517,[107],108]],[1,"dbSWJ+JA9J6IydT2wB+2SO",3],[5,100,80],[-154.635,74.597,0,0,0,0,1,1,1,1]],[158,"loading_arrow copy",61,[[2,0,-518,[109],110]],[1,"a1nb9JxixO96wezF4DWkIr",3],[5,100,80],[151.952,74.597,0,0,0,1,6.123233995736766e-17,1,1,1],[1,0,0,180]],[167,"Title",21,[-519],[1,"26C11V9kZIpaNyH7uEFKJT",3],[4,4278245119],[5,495.83,40],[0,141.423,0,0,0,0,1,1,1,1]],[23,"Slow connection!",100,false,1,1,172,[113]],[34,"The current connection to the server is slow, please wait patiently, if still unable to download data please check your network connection.",60,65,false,1,1,2,97,[114]],[19,"Label",44,[[28,"Reset",20,false,1,1,1,-520,[117]]],[4,4278190080],[5,100,40]],[19,"Label",45,[[28,"Revive",20,false,1,1,1,-521,[124]]],[4,4278190080],[5,100,40]],[32,"streak",30,8,[[60,1,0,-522,[133],134]],[5,400,200],[0,186.934,0,0,0,0,1,2.0322,0.6,2.0322]],[32,"arrow_0",0,8,[[2,0,-523,[135],136]],[5,85,130],[0,185.734,0,0,0,0,1,0.6,0.5,1]],[104,"arrow_1",0,8,[[2,0,-524,[137],138]],[5,85,130],[0,185.734,0,0,0,1,6.123233995736766e-17,0.6,0.5,1],[1,0,0,180]],[32,"arrow_2",0,8,[[2,0,-525,[139],140]],[5,85,130],[0,185.734,0,0,0,0,1,0.6,0.5,1]],[104,"arrow_3",0,8,[[2,0,-526,[141],142]],[5,85,130],[0,185.734,0,0,0,1,6.123233995736766e-17,0.6,0.5,1],[1,0,0,180]],[8,"finger",8,[[2,0,-527,[143],144]],[5,296,470],[0,128.932,0,0,0,0,1,0.3,0.3,1]],[199,"Hold & Drag to control",100,70,false,1,1,2,1,100,[145]],[57,"ConfettiEffect",true,101,[[122,true,0,4,4,-528,[146],[0],[4,25],[11,4,[30,[[13,[4,4282466815]],[13,[4,4282466815]],[3,0.16363636363636364,[4,4282466815]],[3,0.17954545454545456,[4,4282176767]],[3,0.36818181818181817,[4,4282176767]],[3,0.375,[4,4281794378]],[3,0.5590909090909091,[4,4281204545]],[3,0.5681818181818181,[4,4294924263]],[3,0.8159090909090909,[4,4294924259]],[3,0.8250000000000001,[4,4294945850]]],[[24,255],[7,255,1]]]],[4,30],[5,3,20,30],[5,3,30,-30],[4,0.5],[4,1],[0],[126,true,0.5,0.1,[0],[1,-120,0,0],[1,1200,100,300]],[29,true,[11,1,[44,[[7,255,0.35454545454545455],[7,0,1]]]]],[46,true,[5,3,3,-3],[5,3,-3,3],[5,3,3,-3]],147]]],[8,"bg",12,[[175,-529,[152]]],[5,985,984],[0,98.229,0,0,0,0,1,1,1,1]],[74,"Level",12,[[43,"LEVEL",120,false,1,1,-530,[153],154]],[4,4288423932],[5,226.67,40],[7.632,164.588,0,0,0,0,1,1,1,1]],[105,"Number",12,[-531],[4,4288423932],[5,90,40],[7.632,53.62,0,0,0,0,1,1,1,1]],[23,"2",240,false,1,1,187,[155]],[106,"Title",12,[-532],[5,509.81,40],[7.632,-172.097,0,0,0,0,1,1,1,1]],[23,"CONGURATION!",110,false,1,1,189,[156]],[34,"You gained 1 experience star and reached a new level",80,60,false,1,1,2,102,[157]],[32,"star",144,23,[[2,0,-533,[158],159]],[5,200,200],[-290,0,0,0,0,0,1,1,1,1]],[159,"star",144,23,[[2,0,-534,[160],161]],[5,200,200]],[32,"star",144,23,[[2,0,-535,[162],163]],[5,200,200],[290,0,0,0,0,0,1,1,1,1]],[8,"star",24,[[2,0,-536,[164],165]],[5,600,500],[-290,0,0,0,0,0,1,1,1,1]],[18,"star",24,[[2,0,-537,[166],167]],[5,600,500]],[8,"star",24,[[2,0,-538,[168],169]],[5,600,500],[290,0,0,0,0,0,1,1,1,1]],[80,"lb",46,[-539],[5,363.61,40]],[23,"NEW HIGHSCORE",70,false,1,1,198,[174]],[18,"icon",65,[[2,0,-540,[177],178]],[5,80,80]],[8,"btn_bg_price",47,[[2,0,-541,[181],182]],[5,800,200],[0,17.801,0,0,0,0,1,1,1,1]],[8,"icon_share",47,[[81,-542,[183],184]],[5,106,111],[-272.615,18.139,0,0,0,0,1,1,1,1]],[106,"New Label",47,[-543],[5,550,90],[64.289,14.528,0,0,0,0,1,1,1,1]],[34,"Invite Friends",100,70,false,1,1,2,203,[185]],[34,"You can unlock new songs!",65,60,false,1,1,1,104,[186]],[8,"tile_line",25,[[2,0,-544,[187],188]],[5,748,11],[0,-5.659,0,0,0,0,1,1,1,1]],[15,"btn_play_1",67,[[2,0,-545,[189],190]],[1,"25l6DAoB5L0aOCOeL+8FE+",1],[5,60,60]],[15,"bg",26,[[2,0,-546,[195],196]],[1,"a7AcTgfD9Ee7BwC8APt1oB",1],[5,280,110]],[15,"text",26,[[43,"Play",70,false,1,1,-547,[197],198]],[1,"63cqgg2xhH0LIe9GOcMrEn",1],[5,91.39,40]],[15,"bg",16,[[2,0,-548,[199],200]],[1,"ebL52gOIRE1bQ9YFQhwtKd",1],[5,280,110]],[12,"icon",16,[[2,0,-549,[201],202]],[1,"f1sn4uZZBKvaUtKsSVQWz4",1],[5,45,40],[-50.945,-3.483,0,0,0,0,1,1,1,1]],[12,"text",16,[[114,"Play",45,1,1,1,-550,[203]]],[1,"7cmPpMpkdLyq8qex1na1Rw",1],[5,97.27,60],[32.991,0,0,0,0,0,1,1,1,1]],[15,"bg",17,[[2,0,-551,[204],205]],[1,"242QxOXjlJzZVdg3ArNjSu",1],[5,280,110]],[12,"icon",17,[[2,0,-552,[206],207]],[1,"d3TfFa+vNNVoB2nMjVyCfR",1],[5,50,50],[-62.692,0,0,0,0,0,1,1,1,1]],[12,"line_shop",1,[[2,0,-553,[209],210]],[1,"a5nbBPt0lKyIvNctEJma0N",1],[5,748,11],[0,-127.051,0,0,0,0,1,1,1,1]],[18,"icon_back",49,[[2,0,-554,[212],213]],[5,117,106]],[18,"icon_back",50,[[2,0,-555,[216],217]],[5,101,87]],[18,"icon_back",51,[[2,0,-556,[220],221]],[5,101,87]],[19,"circle1",69,[[2,0,-557,[230],231]],[4,4294011753],[5,500,500]],[168,"circle2",69,[-558],[4,4294115072],[5,500,500]],[176,3,0,2,0.25,220,[232],[0,0.5,0.5]],[169,"lb",69,[-559],[5,420,200],[0,0,0,0,0,0.3007057995042731,0.9537169507482269,1,1,1],[1,0,0,35]],[34,"SECOND\nCHANCE?",130,100,false,1,1,3,222,[233]],[18,"bg",18,[[2,0,-560,[234],235]],[5,800,180]],[8,"icon_gold",18,[[2,0,-561,[236],237]],[5,110,90],[-238.815,3.64,0,0,0,0,1,1,1,1]],[160,"GoldLabel",false,18,[[43,"10 - ",110,false,1,1,-562,[238],239]],[5,122.22,40],[-175.801,0.991,0,0,0,0,1,1,1,1]],[200,"CONTINUE",110,11,false,1,2,107,[240]],[18,"bg",27,[[20,0,-563,[241]]],[5,700,180]],[201,"CONTINUE",120,false,1,2,109,[244]],[80,"Label",52,[-564],[5,208.06,40]],[23,"No thanks",70,false,1,1,230,[245]],[8,"--",52,[[202,"-----------------------------------",30,false,-1,1,1,-565,[246],247]],[5,213.5,40],[0,-34.938,0,0,0,0,1,1,1,1]],[92,"Roll to the ball",120,false,1,1,2,111,[252]],[119,"Which has the same color!\n",60,60,false,1,2,112,[253]],[119,"Earn coins to open new songs!",60,50,false,1,2,113,[254]],[80,"GoText",53,[-566],[5,103.33,40]],[23,"GO",120,false,1,1,236,[257]],[105,"Title",19,[-567],[4,4294115072],[5,74.86,40],[0,130.776,0,0,0,0,1,1,1,1]],[23,"Tip!",70,false,1,1,238,[262]],[34,"Get 3 stars to unlock this song forever!",60,65,false,1,1,2,115,[263]],[18,"GoText",70,[[43,"OK",50,false,1,1,-568,[264],265]],[5,45.14,40]],[207,true],[170,"dieAudio","747C5zwGZCoa1nuFVEoahY",20,[242]],[237,false,4,117,77],[161,"icon",false,117,[[2,0,-569,[279],280]],[5,30,30]],[19,"Label",55,[[28,"Upload",20,false,1,1,1,-570,[288]]],[4,4278190080],[5,100,40]]],0,[0,6,1,0,0,1,0,0,1,0,18,105,0,19,16,0,20,17,0,21,26,0,22,68,0,0,1,0,-1,67,0,-2,68,0,-3,26,0,-4,16,0,-5,17,0,-6,215,0,0,2,0,0,2,0,-1,9,0,-2,32,0,-3,76,0,-4,56,0,-5,57,0,-6,58,0,-7,78,0,-8,79,0,-9,80,0,-10,33,0,-11,36,0,-12,40,0,-13,42,0,-14,73,0,-15,38,0,-16,22,0,-17,19,0,-18,8,0,-19,6,0,-20,4,0,-21,28,0,-22,30,0,-23,54,0,-24,3,0,-25,117,0,6,3,0,0,3,0,0,3,0,-1,92,0,-2,93,0,-3,94,0,-4,95,0,-5,61,0,-6,21,0,0,4,0,0,4,0,25,66,0,26,25,0,27,15,0,28,188,0,29,12,0,23,51,0,30,50,0,31,49,0,32,103,0,33,64,0,34,46,0,35,63,0,36,24,0,37,23,0,38,62,0,0,4,0,0,4,0,-1,101,0,-2,62,0,-3,12,0,-4,23,0,-5,24,0,-6,15,0,-7,47,0,-8,25,0,-9,48,0,39,139,0,0,5,0,40,244,0,41,54,0,42,30,0,43,242,0,44,19,0,45,28,0,46,85,0,47,84,0,48,83,0,49,82,0,50,9,0,51,6,0,52,32,0,53,81,0,54,13,0,55,8,0,56,22,0,57,21,0,58,59,0,59,57,0,60,56,0,61,138,0,62,140,0,63,42,0,64,40,0,65,38,0,66,36,0,67,33,0,68,35,0,69,60,0,70,137,0,71,87,0,72,75,0,73,86,0,74,143,0,75,142,0,0,5,0,0,5,0,76,237,0,77,235,0,78,234,0,79,233,0,80,205,0,81,191,0,82,190,0,83,204,0,84,199,0,85,231,0,86,229,0,87,227,0,88,223,0,89,240,0,90,239,0,91,183,0,92,174,0,93,173,0,94,165,0,95,168,0,96,167,0,97,166,0,0,5,0,98,123,0,99,129,0,100,127,0,101,125,0,102,121,0,103,119,0,104,11,0,0,5,0,0,6,0,0,6,0,23,27,0,105,18,0,106,52,0,107,221,0,0,6,0,-1,106,0,-2,69,0,-3,18,0,-4,27,0,-5,52,0,-1,142,0,-2,143,0,5,7,0,-4,60,0,-5,13,0,-6,82,0,-7,83,0,-8,84,0,-9,85,0,-10,86,0,-11,87,0,0,8,0,-1,177,0,-2,178,0,-3,179,0,-4,180,0,-5,181,0,-6,182,0,-7,100,0,0,9,0,0,9,0,-1,132,0,-2,133,0,-3,134,0,-4,135,0,-5,136,0,6,10,0,-1,90,0,-2,91,0,-1,90,0,-2,91,0,-1,90,0,-2,91,0,0,10,0,-1,158,0,-2,159,0,-3,160,0,-1,118,0,-2,120,0,-3,122,0,-4,124,0,-5,126,0,-6,128,0,0,12,0,-1,185,0,-2,186,0,-3,187,0,-4,189,0,-5,102,0,0,13,0,-1,81,0,-2,144,0,-3,145,0,-4,146,0,-1,151,0,-2,152,0,-3,153,0,-4,35,0,-5,157,0,0,15,0,-1,63,0,-2,64,0,-3,46,0,-4,65,0,0,16,0,0,16,0,-1,210,0,-2,211,0,-3,212,0,0,17,0,0,17,0,-1,213,0,-2,214,0,-3,105,0,0,18,0,-1,224,0,-2,225,0,-3,226,0,-4,107,0,0,19,0,-1,114,0,-2,238,0,-3,115,0,-4,70,0,-1,74,0,-2,31,0,-4,243,0,0,21,0,-1,96,0,-2,172,0,-3,97,0,0,22,0,0,22,0,-1,98,0,-2,99,0,0,23,0,-1,192,0,-2,193,0,-3,194,0,0,24,0,-1,195,0,-2,196,0,-3,197,0,0,25,0,-1,104,0,-2,206,0,-3,66,0,0,26,0,0,26,0,-1,208,0,-2,209,0,0,27,0,-1,228,0,-2,108,0,-3,109,0,0,28,0,-1,110,0,-2,29,0,-3,53,0,0,29,0,0,29,0,-1,111,0,-2,112,0,-3,113,0,0,30,0,0,30,0,-1,116,0,-2,71,0,0,31,0,0,31,0,-1,131,0,0,32,0,0,32,0,0,32,0,14,34,0,0,33,0,0,33,0,-1,34,0,0,34,0,0,34,0,-1,141,0,-1,154,0,-2,155,0,-3,156,0,14,37,0,0,36,0,0,36,0,-1,37,0,0,37,0,0,37,0,-1,161,0,14,39,0,0,38,0,0,38,0,-1,39,0,0,39,0,0,39,0,-1,162,0,14,41,0,0,40,0,0,40,0,-1,41,0,0,41,0,0,41,0,-1,163,0,14,43,0,0,42,0,0,42,0,-1,43,0,0,43,0,0,43,0,-1,164,0,0,44,0,0,44,0,-1,175,0,0,45,0,0,45,0,-1,176,0,0,46,0,0,46,0,-1,198,0,0,47,0,-1,201,0,-2,202,0,-3,203,0,0,48,0,-1,49,0,-2,50,0,-3,51,0,0,49,0,0,49,0,-1,216,0,0,50,0,0,50,0,-1,217,0,0,51,0,0,51,0,-1,218,0,0,52,0,-1,230,0,-2,232,0,0,53,0,0,53,0,0,53,0,-1,236,0,0,54,0,0,54,0,-1,72,0,0,55,0,0,55,0,-1,246,0,0,56,0,0,56,0,0,57,0,0,57,0,0,58,0,-1,77,0,-2,59,0,0,59,0,0,59,0,0,60,0,0,60,0,-1,169,0,-2,170,0,-3,171,0,0,62,0,0,62,0,0,63,0,0,63,0,0,64,0,0,64,0,0,65,0,-1,200,0,-2,103,0,0,66,0,0,67,0,0,67,0,-1,207,0,0,68,0,0,68,0,-1,219,0,-2,220,0,-3,222,0,0,70,0,0,70,0,-1,241,0,0,71,0,0,71,0,0,71,0,0,72,0,0,72,0,0,72,0,0,73,0,0,73,0,-2,130,0,0,75,0,-1,137,0,0,76,0,0,77,0,-1,138,0,0,78,0,-1,139,0,0,79,0,-1,140,0,0,80,0,0,81,0,-1,147,0,-1,148,0,-1,149,0,-1,150,0,0,86,0,-1,165,0,0,92,0,-1,166,0,0,93,0,-1,167,0,0,94,0,-1,168,0,0,95,0,0,96,0,0,96,0,-1,174,0,0,97,0,0,98,0,0,99,0,-1,183,0,0,100,0,0,101,0,-1,184,0,-1,191,0,0,102,0,0,103,0,-1,205,0,0,104,0,0,105,0,0,106,0,0,106,0,-1,227,0,0,107,0,0,108,0,0,108,0,-1,229,0,0,109,0,0,110,0,0,110,0,-1,233,0,0,111,0,-1,234,0,0,112,0,-1,235,0,0,113,0,0,114,0,0,114,0,-1,240,0,0,115,0,0,116,0,0,116,0,-1,244,0,-1,245,0,-1,119,0,-1,121,0,-1,123,0,-1,125,0,-1,127,0,-1,129,0,0,131,0,0,132,0,0,133,0,0,134,0,0,135,0,0,136,0,0,141,0,0,144,0,0,145,0,0,146,0,0,147,0,0,148,0,0,149,0,0,150,0,0,151,0,0,152,0,0,153,0,0,154,0,0,155,0,0,156,0,0,157,0,0,158,0,0,159,0,0,160,0,0,161,0,0,162,0,0,163,0,0,164,0,0,169,0,0,170,0,0,171,0,-1,173,0,0,175,0,0,176,0,0,177,0,0,178,0,0,179,0,0,180,0,0,181,0,0,182,0,0,184,0,0,185,0,0,186,0,-1,188,0,-1,190,0,0,192,0,0,193,0,0,194,0,0,195,0,0,196,0,0,197,0,-1,199,0,0,200,0,0,201,0,0,202,0,-1,204,0,0,206,0,0,207,0,0,208,0,0,209,0,0,210,0,0,211,0,0,212,0,0,213,0,0,214,0,0,215,0,0,216,0,0,217,0,0,218,0,0,219,0,-1,221,0,-1,223,0,0,224,0,0,225,0,0,226,0,0,228,0,-1,231,0,0,232,0,-1,237,0,-1,239,0,0,241,0,0,245,0,0,246,0,108,20,1,5,66,2,5,31,5,5,20,7,5,20,10,5,14,11,5,74,14,5,87,44,5,98,45,5,99,55,5,73,75,5,130,242,0,243,570],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,137,165,166,167,168,173,174,183,188,190,191,199,204,205,221,223,227,229,231,233,234,235,237,239,240,242],[-1,-1,-1,-1,-1,-1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,-1,-1,3,-1,3,-1,1,-1,3,-1,-1,-1,-1,-1,1,109,110,111,112,113,-1,-1,8,-1,8,-1,8,-1,8,-1,1,-1,3,-1,3,-1,3,-1,3,-1,1,-1,1,-1,8,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,1,9,10,11,12,-1,-1,1,9,10,11,12,-1,-1,1,16,9,10,11,12,-1,-1,1,16,9,10,11,12,-1,-1,-1,-1,-1,1,-1,1,-1,1,-1,1,-1,-1,-1,1,-1,-1,1,9,10,11,12,-1,-1,1,9,10,11,12,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,-1,8,-1,8,-1,3,-1,-1,3,-1,-1,-1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,3,-1,3,-1,-1,1,-1,1,-1,3,-1,1,-1,1,-1,-1,-1,1,-1,1,-1,1,-1,3,-1,1,-1,3,-1,1,-1,1,-1,-1,1,-1,1,-1,-1,1,-1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,114,17,-1,1,-1,1,-1,-1,-1,1,-1,1,-1,3,-1,-1,-1,3,-1,-1,-1,3,-1,1,-1,1,-1,-1,-1,-1,1,-1,-1,1,-1,1,-1,-1,-1,3,-1,1,-1,3,-1,1,16,-1,1,-1,1,-1,1,-1,1,17,115,116,9,10,11,12,-1,-1,1,9,10,11,12,-1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,3,3,3,3,3,3,3,3,3,3,17],[0,0,0,0,0,0,0,62,0,63,0,18,0,18,0,18,64,0,0,1,0,1,0,19,0,1,0,0,0,0,0,2,65,66,67,68,69,70,12,8,12,8,12,8,12,8,0,71,0,1,0,1,0,1,0,1,0,10,0,27,72,73,74,75,76,0,10,37,77,78,37,0,0,2,2,6,2,7,0,0,2,2,6,2,7,0,0,2,0,2,6,2,7,0,0,2,0,2,6,2,7,0,0,0,0,0,79,0,38,0,38,0,39,0,0,0,80,0,0,2,2,6,2,7,0,0,2,2,6,2,7,0,81,0,82,0,13,0,13,0,13,0,13,0,83,0,40,8,40,8,0,1,0,0,1,0,0,0,0,20,0,20,0,20,0,21,0,21,0,21,0,1,0,1,0,0,84,0,19,0,1,0,85,0,41,0,0,0,17,0,29,0,30,0,1,0,31,0,1,0,32,0,33,0,0,34,0,35,0,0,17,0,0,86,0,22,0,87,0,22,0,41,0,22,0,23,88,89,0,23,0,42,0,0,0,24,0,90,0,1,0,0,0,1,0,0,0,1,0,23,0,9,0,0,0,0,91,0,0,24,0,39,0,0,0,1,0,24,0,1,0,92,0,0,9,0,93,0,9,0,19,94,36,95,2,6,2,7,0,0,2,2,6,2,7,0,9,1,1,1,1,1,1,1,1,1,1,1,1,1,1,42,1,1,1,1,1,1,1,1,1,1,96]],[[{"name":"btn_bg_0","rect":[3,556,455,135],"offset":[0,0.5],"originalSize":[455,136],"capInsets":[0,0,0,0]}],[1],0,[0],[2],[43]],[[{"name":"star_slider_bg","rect":[467,3,27,449],"offset":[0,0],"originalSize":[27,449],"capInsets":[0,0,0,0]}],[1],0,[0],[2],[3]],[[[14,"HexaForCompleted",[{},"0",11,[{"defines":{}},"props",11,[{},"tintColor",8,[4,2443552165],"mainTexture",6,0]]]]],0,0,[0,0],[7,4],[28,5]],[[{"name":"rotate_circle","rect":[3,422,244,252],"offset":[-1.5,0],"originalSize":[247,252],"rotated":1,"capInsets":[0,0,0,0]}],[1],0,[0],[2],[16]],[[{"name":"star_slider_fill","rect":[429,3,32,457],"offset":[0,0],"originalSize":[32,457],"capInsets":[0,0,0,0]}],[1],0,[0],[2],[3]],[[{"name":"circle_countdown_2","rect":[3,3,547,547],"offset":[0,0],"originalSize":[547,547],"capInsets":[0,0,0,0]}],[1],0,[0],[2],[43]],[[{"name":"btn_bg_play","rect":[190,625,205,82],"offset":[0,0],"originalSize":[205,82],"capInsets":[0,0,0,0]}],[1],0,[0],[2],[11]],[[{"name":"icon_music","rect":[17,652,100,87],"offset":[-0.5,-0.5],"originalSize":[163,148],"capInsets":[0,0,0,0]}],[1],0,[0],[2],[4]],[[[14,"mesh-texture",[{},"0",11,[{"defines":{"USE_DIFFUSE_TEXTURE":true,"USE_ALPHA_TEST":false,"INPUT_IS_GAMMA":false,"OUTPUT_TO_GAMMA":false}},"props",11,[{},"diffuseColor",8,[4,4289572269],"diffuseTexture",6,0]]]]],0,0,[0,0],[15,4],[97,14]],[[[83,".bin",[[84,4,[85,128],[[21,"a_normal",5126,3],[21,"a_position",5126,3],[21,"a_uv0",5126,2]]]],[[87,[0],[86,128,12]]],[1,-0.5,-0.5,0],[1,0.5,0.5,0]],-1],0,0,[],[],[]],[[{"name":"default_btn_pressed","rect":[0,0,40,40],"offset":[0,0],"originalSize":[40,40],"capInsets":[12,12,12,12]}],[1],0,[0],[2],[98]],[[{"name":"btn_bg_price","rect":[3,724,209,87],"offset":[0,0.5],"originalSize":[209,88],"capInsets":[0,0,0,0]}],[1],0,[0],[2],[11]],[[{"name":"ball_move","rect":[427,775,75,75],"offset":[0,0],"originalSize":[75,75],"capInsets":[0,0,0,0]}],[1],0,[0],[2],[3]],[[{"name":"default_btn_normal","rect":[0,0,40,40],"offset":[0,0],"originalSize":[40,40],"capInsets":[12,12,12,12]}],[1],0,[0],[2],[99]],[[[110,"star",".mp3",1.2821],-1],0,0,[],[],[]],[[[127,[{},"0",11,[{"defines":{"USE_DIFFUSE_TEXTURE":false,"USE_EMISSIVE":true,"USE_EMISSIVE_TEXTURE":true,"USE_SPECULAR":false,"USE_NORMAL_TEXTURE":true,"USE_ALPHA_TEST":false,"OUTPUT_TO_GAMMA":true,"INPUT_IS_GAMMA":true}},"props",11,[{"alphaThreshold":1,"glossiness":10},"diffuseColor",8,[4,4294967295],"emissiveColor",8,[4,4294967295],"diffuseTexture",6,0,"emissiveTexture",6,1,"normalTexture",6,2]]]]],0,0,[0,0,0,0],[15,117,118,4],[25,25,25,100]]]]